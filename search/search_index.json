{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Actualit\u00e9s</p> <ul> <li>note</li> </ul>"},{"location":"1_Base_de_donnees/sommaire/","title":"sommaire","text":""},{"location":"2_SQL%20Complexe/sommaire/","title":"sommaire","text":""},{"location":"3_UML/sommaire/","title":"sommaire","text":""},{"location":"4_Laravel/sommaire/","title":"Laravel","text":"<ol> <li>Installation</li> <li>Cr\u00e9ation Projet ToDO</li> </ol>"},{"location":"4_Laravel/4.1_installation/cours/","title":"Cours","text":"<p>Cr\u00e9dit</p> <p>TP d\u00e9couverte D\u2019apr\u00e8s un travail de Valentin Brousseau</p> <p>Ressources</p> <ul> <li>Cours Valentin Brosseau</li> <li>Sillo</li> <li>OpenclassRoom</li> <li>c4software</li> <li>phptherightway</li> <li>Livre : Laravel par Rapha\u00ebl Huchet aux \u00e9ditions ENI</li> </ul>"},{"location":"4_Laravel/4.1_installation/cours/#installation-composer","title":"Installation Composer","text":"<p>R\u00e9cup\u00e9rer l\u2019ex\u00e9cutable de composer et l\u2019ex\u00e9cuter.  L\u2019installateur vous demandera o\u00f9 se trouve php.exe (en g\u00e9n\u00e9ral : <code>C:\\wamp\\bin\\php\\phpX.X.X</code>). Cela installe Composer et met \u00e0 jour le PATH de fa\u00e7on \u00e0 ce que l'on puisse taper la commande composer en ligne de commande depuis n'importe quel r\u00e9pertoire.</p> erreur opensssl <p>Si erreur \"The openssl extension is missing which means that secure https transfer are impossible\" activer la ligne extension=php_openssl.dll  en visualisant les extensions PHP de votre WAMP.</p> <p>Composer a besoin d'un fichier <code>composer.json</code> associ\u00e9. Ce fichier contient les instructions pour Composer : les d\u00e9pendances, les classes \u00e0 charger automatiquement... Voici un extrait de ce fichier pour Laravel :</p> <p>PHP<pre><code>{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \"&gt;=5.5.9\",\n        \"laravel/framework\": \"5.2.*\"\n    },\n    ...\n}\n</code></pre> Composer fonctionne en ligne de commande.  Pour v\u00e9rifier la bonne installation de votre composer, vous pouvez taper dans votre invite de commande <code>Composer</code></p>"},{"location":"4_Laravel/4.1_installation/cours/#installation-de-laravel","title":"Installation de LARAVEL","text":"<p>Lancer la commande suivante :</p> <p>\ud83d\udccb Texte<pre><code>composer global require \"laravel/installer\"\n</code></pre>  V\u00e9rifier que la commande <code>laravel -h</code> fonctionne. </p> <p></p>"},{"location":"4_Laravel/4.1_installation/cours/#creation-du-projet-laravel","title":"Cr\u00e9ation du projet LARAVEL","text":"<p>Votre poste est maintenant configur\u00e9 pour Laravel, vous pouvez donc cr\u00e9er un nouveau projet gr\u00e2ce \u00e0 la commande ci- dessous:</p> <p> Attention, le projet sera cr\u00e9\u00e9 dans le dossier courant. D\u00e9placer votre invite de commande dans le bon r\u00e9pertoire avant de lancer votre commande de cr\u00e9ation de projet: </p> \ud83d\udccb Texte<pre><code>CD C:\\\\wamp\\www\\\ncomposer create-project --prefer-dist laravel/laravel monProjet\n</code></pre> <p>Apr\u00e8s quelques minutes, on obtient l\u2019arborescence suivante :</p> <p></p>"},{"location":"4_Laravel/4.1_installation/cours/#description-arborescence-laravel","title":"Description arborescence Laravel","text":"<p>Dans le r\u00e9pertoire <code>\\app</code>, on trouve les dossiers suivants.</p> <ul> <li> <p>Console/Commands : toutes les commandes en mode console, il y a au d\u00e9part une commande Inspire qui sert d'exemple,</p> </li> <li> <p>Http: tout ce qui concerne la communication : contr\u00f4leurs, routes, middlewares (il y a quater middlewares de base) et requ\u00eates,</p> </li> <li>Providers : tous les fournisseurs de services (providers), il y en a d\u00e9j\u00e0 4 au d\u00e9part. Les providers servent \u00e0 initialiser les composants.</li> <li>Policies : permet de g\u00e9rer facilement les droits d'acc\u00e8s.</li> <li> <p>Model : Mod\u00e8le par d\u00e9faut dans l'application  Les autres dossiers suivants :</p> </li> <li> <p>bootstrap : scripts d'initialisation de Laravel pour le chargement automatique des classes, la fixation de l'environnement et des chemins, et pour le d\u00e9marrage de l'application,</p> </li> <li>public : tout ce qui doit appara\u00eetre dans le dossier public du site : images, CSS, scripts...</li> <li>vendor : tous les composants de Laravel et de ses d\u00e9pendances,</li> <li>config : toutes les configurations : application, authentification, cache, base de donn\u00e9es, espaces de noms, emails, syst\u00e8mes de fichier, session...</li> <li>database : migrations et les populations,</li> <li>resources : vues, fichiers de langage et assets (par exemple les fichiers LESS ou Sass),</li> <li>storage : donn\u00e9es temporaires de l'application : vues compil\u00e9es, caches, cl\u00e9s de session...</li> <li>tests : fichiers de tests unitaires.</li> </ul> <p>Et \u00e0 la racine :</p> <ul> <li>artisan : outil en ligne de Laravel pour des t\u00e2ches de gestion,</li> <li>composer.json : fichier de r\u00e9f\u00e9rence de Composer,</li> <li>phpunit.xml : fichier de configuration de phpunit (pour les tests unitaires),</li> <li>.env : fichier pour sp\u00e9cifier l'environnement d'ex\u00e9cution.</li> </ul> <p>Pour v\u00e9rifier que tout est fonctionnel, vous pouvez aller visualiser la partie public.  http://localhost/monProjet/public/</p>"},{"location":"4_Laravel/4.1_installation/cours/#artisan","title":"Artisan :","text":"<p>Artisan est l\u2019interface en ligne de commande de Laravel. Cet outil permet de lancer des commandes \u00e0 destination de Laravel pour cr\u00e9er un contr\u00f4leur, une migration, vider un cache, traiter des files d\u2019attentes, etc. Il permet de gagner du temps.</p>"},{"location":"4_Laravel/4.1_installation/cours/#initialisation","title":"Initialisation","text":"<p>Votre nouveau projet contient un fichier <code>.env</code> ouvrez le, et ajouter en d\u00e9but de fichier <code>APP_NAME=monProjet</code></p> <p>Question</p> QuestionR\u00e9ponse <p>O\u00f9 se trouve le fichier des variables d\u2019environnement de l\u2019application ?</p> <p>A la racine du projet. Laravel propose un syst\u00e8me de variables li\u00e9es \u00e0 l\u2019environnement (prod ou dev\u2026). Ces variables sont stock\u00e8es dans un fichier .env qui ne doit en aucun cas \u00eatre partag\u00e9. Une application Laravel aura donc un fichier diff\u00e9rent sur chaque poste. Il ne devra en aucun cas \u00eatre remont\u00e9 sur git (voir r\u00e8gles .gitignore)</p> <p>Question</p> QuestionR\u00e9ponse <p>A quoi sert la variable APP_DEBUG ?</p> <p>La variable <code>APP_DEBUG</code> a la valeur <code>true</code>. On va la conserver ainsi puisqu'on veut \u00eatre en mode \"debug\". Vous \u00eates ainsi en mode d\u00e9bogage avec affichage de messages d'erreur d\u00e9taill\u00e9s. Si vous la mettez \u00e0 <code>false</code> (ou si vous la supprimez), avec une URL non pr\u00e9vue vous obtenez maintenant juste : \"Un message d'erreur en mode \"production\"  Il ne faudra \u00e9videmment pas laisser la valeur true lors d'une mise en production ! On reparlera de \u00e7a lorsqu'on verra la gestion de l'environnement. Vous ne risquerez ainsi plus d'oublier de changer cette valeur parce que Laravel saura si vous \u00eates sur votre serveur de d\u00e9veloppement ou sur celui de production.</p> <p>Question</p> QuestionR\u00e9ponse <p>A quoi sert la variable APP_KEY ?</p> <p>La valeur de APP_KEY qui s\u00e9curise les informations est automatiquement g\u00e9n\u00e9r\u00e9e lors de l'installation avec <code>create-project</code>.</p> <p>Question</p> QuestionR\u00e9ponse <p>A quoi sert le fichier .htacess du projet ?</p> <p>Si vous avez un serveur Apache lorsque la requ\u00eate du client arrive sur le serveur o\u00f9 se trouve notre application Laravel elle passe en premier par le fichier <code>.htaccess</code>, s'il existe, qui fixe des r\u00e8gles pour le serveur. Il y a justement un fichier <code>.htaccess</code> dans le dossier public de Laravel avec une r\u00e8gle de r\u00e9\u00e9criture de telle sorte qu'on peut avoir une url simplifi\u00e9 : (http://monsite.fr/mapage)  La r\u00e9\u00e9criture des URLS : Pour que \u00e7a fonctionne il faut que le serveur Apache ait le module <code>mod_rewrite</code> activ\u00e9.</p>"},{"location":"4_Laravel/4.1_installation/cours/#lancer-le-projet-dexemple","title":"Lancer le projet d\u2019exemple","text":"<p>Laravel int\u00e8gre un serveur de test permettant de valider son d\u00e9veloppement avec rien d\u2019autre que PHP sur sa machine. </p> \ud83d\udccb Texte<pre><code>CD c:\\\\wamp\\www\\monProjet\nphp artisan serve\n</code></pre> <p>Rendez-vous maintenant dans votre navigateur pour voir le site de d\u00e9monstration fourni par Laravel.   http://localhost:8000/</p> <p>Commandes utiles pour d\u00e9boguer</p> <ul> <li>dd() : affiche la variable pass\u00e9e en param\u00e8tres et arr\u00eate le programme.</li> <li>dump() :idem dd() mais n\u2019arr\u00eate pas le programme</li> <li>log() : Utilisation du journal local : Chaque \u00e9l\u00e9ment est affich\u00e9 dans le journal et est dat\u00e9.     (emergency, alert, critical, error, warning, notice, info, debug)<ul> <li>Log ::emergency(\u2018Urgence\u2019) ;</li> <li>Log :: error(\u2018erreur\u2019) ;     </li> </ul> </li> </ul>"},{"location":"4_Laravel/4.1_installation/cours/#modifier-le-template-par-defaut","title":"Modifier le template par d\u00e9faut","text":"<p>Ouvrez le fichier <code>resources/views/welcome.blade.php</code>, ajouter la variable <code>$titre</code>.  La syntaxe \u00abblade\u00bb est la suivante <code>{{ $titre }}</code>. Ajouter cette variable apr\u00e8s le mot Laravel par exemple (ligne 38)  Vous avez d\u00e9fini votre premi\u00e8re variable c'est bien. Mais pour l'instant rien n'est modifi\u00e9\u2026   Pour que quelque chose s\u2019affiche :</p> <p> \u00c9diter le fichier routes/web.php, la ligne Route en :</p> PHP<pre><code>Route::get('/welcome', function () {\n    return view('welcome', ['titre' =&gt; 'mon premier exemple.']);\n})-&gt; name('welcome');\nou\nRoute::view('/welcome', 'welcome', ['titre' =&gt; 'mon premier exemple.']);\n</code></pre> <p>\ud83d\udca1 Vous pouvez \u00e9galement appeler des fonctions dans les templates, exemple <code>{{ time() }}</code>. Tester cette fonction en ajoutant :</p> PHP<pre><code>&lt;p&gt;Le Timestamp est {{ time() }}&lt;/p&gt;\n</code></pre> <p>Question</p> QuestionR\u00e9ponse <p>\u00c0 votre avis est-il possible d'appeler d'autre fonctions ?</p> <p>Oui, on peut utiliser toutes les fonctions natives de PHP, notamment celle qui retournent en valeur ainsi que nos propres fonctions. De ce point de vue, Laravel est tr\u00e8s permissif et un projet Laravel peut vite \u00eatre ing\u00e9rable si des r\u00e8gles strictes d\u2019organisation du code n\u2019est pas respect\u00e9s.</p>"},{"location":"4_Laravel/4.1_installation/cours/#le-moteur-de-gabarittemplate-blade","title":"Le moteur de gabarit(template) BLADE","text":"<p>Utiliser un moteur de gabarit permet d\u2019assurer directement la s\u00e9curit\u00e9, la lisibilit\u00e9, et l\u2019organisation du code.a</p> <p>Warning</p> <p>Toutes les fonctions utiliser \u00e0 travers BLADE sont envoy\u00e9s \u00e0 travers la fonctions htmlspecialchars() pour se pr\u00e9munir des attaques XSS.</p> <p>Note</p> <p>Les \u00e9l\u00e9ments entre doubles accolades : pour afficher des donn\u00e9es. Les \u00e9l\u00e9ments pr\u00e9c\u00e9d\u00e9s d\u2019un @ pour structurer et contr\u00f4ler l\u2019affichage.</p>"},{"location":"4_Laravel/4.1_installation/cours/#creer-des-routes","title":"Cr\u00e9er des routes","text":"<p>Laravel permet que des adresses du type <code>/index.php?page=articles&amp;id=123</code> soit remplac\u00e9es par des adresses plus expressives comme <code>/articles/monArticle</code></p> <p>Laravel utilise un syst\u00e8me de routes simple. D\u00e9clarer une route permet de lier une URI (identifiant de ressource uniforme, autrement dit la partie de l\u2019adresse qui suit le nom de domaine) \u00e0 un code \u00e0 ex\u00e9cuter. La liste des routes se trouve dans le fichier <code>routes/web.php</code> d\u2019un projet Laravel. Il faut alimenter ce fichier au fur et \u00e0 mesure de l\u2019ajout de nouvelles pages sur le site.</p>"},{"location":"4_Laravel/4.1_installation/cours/#les-methodes-http","title":"Les m\u00e9thodes HTTP :","text":"<p>Il existe plusieurs m\u00e9thodes http auxquelles le serveur peut r\u00e9pondre.</p> <p>Note</p> PHP<pre><code>Route :: get($URI, function()) ;\nRoute :: post($URI, function()) ;\nRoute :: put($URI, function()) ;\nRoute :: delete($URI, function()) ;\n</code></pre> <p>Pour tester le fonctionnement nous allons ajouter une nouvelle Route dans le projet de d\u00e9monstration. Nous allons donc ajouter dans le fichier <code>routes/web.php</code> :</p> PHP<pre><code>Route::get('/ping', function () {\n    return \"pong\";\n});\n</code></pre> <p>Question</p> questionr\u00e9ponse <p>Quelle URL avez-vous utilis\u00e9 ?</p> <p>http://localhost:8000/ping</p>"},{"location":"4_Laravel/4.1_installation/cours/#groupe-de-route","title":"Groupe de Route","text":"<p>On pourra vouloir regrouper toutes les routes ayant les m\u00eames fonctionnalit\u00e9s sous un m\u00eame chemin. On utilisera alors la notion de groupe de routes</p> <p>Note</p> PHP<pre><code>Route::middleware(['first', 'second'])-&gt;group(function () {\n    Route::get('/', function () {\n        // Uses first &amp; second middleware...\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses first &amp; second middleware...\n    });\n});\n</code></pre>"},{"location":"4_Laravel/4.1_installation/cours/#parametres-des-routes","title":"Param\u00e8tres des routes","text":"<p>Il est parfois int\u00e9ressant de capturer certaines parties de l\u2019URI d\u2019une route pour la traiter ensuite. </p> <p>Par exemple, dans le cas d\u2019une boutique en ligne, on veut afficher la page de l\u2019article 1, ou la page de l\u2019article 2 \u2026. Il peut \u00eatre int\u00e9ressant de capturer l\u2019identifiant de l\u2019article dans l\u2019URI pour rechercher et afficher le descriptif correspondant.</p> PHP<pre><code>Route::get('article/{n}', function($n) {\n    //$article= get_article($id)\n    //return \u2018descriptif de l article :\u2019.$article-&gt;text\n     return view('article')-&gt;with('numero', $n);\n})-&gt;where('n', '[0-9]+');\n</code></pre> <p>Pour traiter la variable captur\u00e9e, il faut la passer en param\u00e8tres de la fonction de rappel de la route en lui donnant le m\u00eame nom. Dans l\u2019exemple, on peut imaginer un fonction <code>$get_article</code> qui prend en param\u00e8tre un identifiant d\u2019article et retourne un objet dont la propri\u00e9t\u00e9 text contient le descriptif de l\u2019article. Ici je me suis content\u00e9 de renvoyer une page statique affichant le num\u00e9ro de l\u2019article.</p> <p>Note</p> <p>il est possible d\u2019utiliser plusieurs param\u00e8tres s\u00e9par\u00e9s par des / et d\u2019afficher des routes avec plusieurs param\u00e8tres.</p>"},{"location":"4_Laravel/4.1_installation/cours/#ordre-des-routes","title":"Ordre des routes :","text":"<p>Les routes sont analys\u00e9e dans leur ordre dans le fichier des routes. PHP<pre><code>Route::get('{n}', function($n) {\nreturn 'Je suis la page ' . $n . ' !';\n});\n\nRoute::get('contact', function() {\nreturn \"C'est moi le contact.\";\n});\n</code></pre></p>"},{"location":"4_Laravel/4.1_installation/cours/#ajouter-une-nouvelle-vue","title":"Ajouter une nouvelle vue","text":"<p>Maintenant que nous avons d\u00e9clar\u00e9 une nouvelle route, nous allons revoir l\u00e9g\u00e8rement les templates pour : -   D\u00e9clarer un template principal (aussi appel\u00e9 : layout). -   Modifier le welcome.blade.php pour y faire r\u00e9f\u00e9rence. -   Utiliser le layout pour r\u00e9pondre pong.</p> <p>Question</p> QuestionR\u00e9ponse <p>Pourquoi un tel d\u00e9coupage ?</p> <p>Permet de cr\u00e9er des page mod\u00e8le ayant la m\u00eame structure. Non redondance de code.</p>"},{"location":"4_Laravel/4.1_installation/cours/#creer-le-layout","title":"Cr\u00e9er le layout","text":"<p>Cr\u00e9er un nouveau fichier <code>resources/views/layouts/base.blade.php</code> avec le contenu suivant. C\u2019est tout simplement un d\u00e9coupage en \u00ab layout \u00bb du template de base de d\u00e9monstration.</p> Code a copier HTML<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"{{ app()-&gt;getLocale() }}\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n        &lt;title&gt;Laravel - @yield('title')&lt;/title&gt;\n\n        &lt;!-- Fonts --&gt;\n        &lt;link href=\"https://fonts.googleapis.com/css?family=Raleway:100,600\" rel=\"stylesheet\" type=\"text/css\"&gt;\n\n        &lt;!-- Styles --&gt;\n        &lt;style&gt;\n            html, body {\n                background-color: #fff;\n                color: #636b6f;\n                font-family: 'Raleway', sans-serif;\n                font-weight: 100;\n                height: 100vh;\n                margin: 0;\n            }\n            .full-height {\n                height: 100vh;\n            }\n            .flex-center {\n                align-items: center;\n                display: flex;\n                justify-content: center;\n            }\n            .position-ref {\n                position: relative;\n            }\n            .top-right {\n                position: absolute;\n                right: 10px;\n                top: 18px;\n            }\n            .content {\n                text-align: center;\n            }\n            .title {\n                font-size: 84px;\n            }\n            .links &gt; a {\n                color: #636b6f;\n                padding: 0 25px;\n                font-size: 12px;\n                font-weight: 600;\n                letter-spacing: .1rem;\n                text-decoration: none;\n                text-transform: uppercase;\n            }\n            .m-b-md {\n                margin-bottom: 30px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"flex-center position-ref full-height\"&gt;\n            @if (Route::has('login'))\n                &lt;div class=\"top-right links\"&gt;\n                    @auth\n                        &lt;a href=\"{{ url('/home') }}\"&gt;Home&lt;/a&gt;\n                    @else\n                        &lt;a href=\"{{ route('login') }}\"&gt;Login&lt;/a&gt;\n                        &lt;a href=\"{{ route('register') }}\"&gt;Register&lt;/a&gt;\n                    @endauth\n                &lt;/div&gt;\n            @endif\n\n            &lt;div class=\"content\"&gt;\n                @yield('content')\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Question</p> QuestionR\u00e9ponse <p>A quoi sert le mot clef <code>@yield</code> ?</p> <p>Il d\u00e9signe l\u2019emplacement sp\u00e9cialis\u00e9 de chaque layout. Il est associc\u00e9 \u00e0 un mot cl\u00e9 permettant d\u2019y envoy\u00e9 les donn\u00e9es qui ne sont pas communes \u00e0 chaque page.</p>"},{"location":"4_Laravel/4.1_installation/cours/#utiliser-le-layout-dans-welcomebladephp","title":"Utiliser le layout dans welcome.blade.php","text":"<p>Documentation sur les templates https://laravel.com/docs/10.x/blade</p> <p>Maintenant que nous avons notre template de base nous allons l\u2019utiliser dans le template \u00ab Welcome \u00bb. Remplacer le contenu de <code>resources/views/welcome.blade.php</code> par :</p> PHP<pre><code>@extends('layouts.base')\n\n@section('title', 'Bienvenue')\n\n@section('content')\n   &lt;div class=\"title m-b-md\"&gt;\n        Laravel\n    &lt;/div&gt;\n\n    &lt;div class=\"links\"&gt;\n        &lt;a href=\"https://laravel.com/docs\"&gt;Documentation&lt;/a&gt;\n        &lt;a href=\"https://laracasts.com\"&gt;Laracasts&lt;/a&gt;\n        &lt;a href=\"https://laravel-news.com\"&gt;News&lt;/a&gt;\n        &lt;a href=\"https://forge.laravel.com\"&gt;Forge&lt;/a&gt;\n        &lt;a href=\"https://github.com/laravel/laravel\"&gt;GitHub&lt;/a&gt;\n    &lt;/div&gt;\n@endsection\n</code></pre>"},{"location":"4_Laravel/4.1_installation/cours/#utiliser-le-layout-dans-la-route-pong","title":"Utiliser le layout dans la route Pong","text":"<p>Bon, maintenant que nous avons d\u00e9clar\u00e9 un layout utilisons-le dans la 2nd route (<code>/ping</code>) que nous avons cr\u00e9\u00e9. Pour cette derni\u00e8re action je ne vous donne pas de code, mais uniquement les \u00e9tapes :</p> <p>A faire</p> <ul> <li>Cr\u00e9ez une Vue par exemple <code>ping.blade.php</code> (Dans le dossiers views)</li> <li>Utilisez <code>@extends('base')</code> pour \u00ab h\u00e9riter \u00bb de votre layout principal.</li> <li>Modifiez <code>web.php</code> pour r\u00e9pondre avec la fonction view comme dans l\u2019autre route.</li> </ul> tips aideaide ++ <p>Dans un premier temps on dit qu'on veut utiliser le template avec @extends et le nom du template \"template\". Ensuite on remplit les zones pr\u00e9vues dans le template gr\u00e2ce \u00e0 la syntaxe <code>@section</code> en pr\u00e9cisant le nom de l'emplacement et en fermant avec <code>@endsection</code> . </p> PHP<pre><code>@extends('layouts/base')\n@section('title', 'Bienvenue')\n\n@section('content')\n&lt;h1&gt;PONG&lt;/h1&gt;\n@endsection\n</code></pre>"},{"location":"4_Laravel/4.2_toDo/4.2.1_initialisation/","title":"Introduction","text":"<p>Dans ce TP nous allons r\u00e9aliser une application web, \u00ab TODO \u00bb ou aussi appel\u00e9 liste de t\u00e2ches. Une TODO List est un proc\u00e9d\u00e9 qui se veut simple et efficace pour g\u00e9rer les t\u00e2ches d'un projet. Ces t\u00e2ches peuvent \u00eatre ind\u00e9pendantes ou devoir, au contraire, \u00eatre accomplies dans un certain ordre. Ces t\u00e2ches pourront \u00e9galement \u00eatre cat\u00e9goris\u00e9es (pro, perso, famille, ...). Voil\u00e0 la liste des fonctionnalit\u00e9s de l\u2019application que l'on va cr\u00e9er : - Lister les t\u00e2ches. - Ajouter une t\u00e2che. - Marquer comme termin\u00e9 une t\u00e2che. - Suppression d'une t\u00e2che.</p> <p>Technologie</p> <p>Dans ce TP nous allons utiliser les technologies suivantes : - Laravel (Framework PHP) - ORM Eloqent - Bootstrap 4 (Framework HTML / CSS / JS) - NodeJS (Utilisation de Webpack)</p>"},{"location":"4_Laravel/4.2_toDo/4.2.1_initialisation/#initialiser-le-projet","title":"Initialiser le projet","text":"<p>La premi\u00e8re \u00e9tape lors d'un projet Laravel est la cr\u00e9ation de la structure avec une simple ligne de commande, dans notre cas : \u270b Attention, le projet va \u00eatre cr\u00e9\u00e9 dans le dossier todo2024 dans le dossier courant.</p> \ud83d\udccb Texte<pre><code>composer create-project --prefer-dist laravel/laravel todo2024 \n</code></pre> <p>Question</p> Questionr\u00e9ponse <p>O\u00f9 sont les librairies ?</p> <p>Les vendor repr\u00e9sentent les biblioth\u00e8ques tierce qui sont n\u00e9cessaires au projet mais qui sont des ressources externe, c'est notamment le nom utiliser par le dossier ou sont stocker les d\u00e9pendances t\u00e9l\u00e9charg\u00e9es via le package manager le plus utiliser de php : composer</p> <p>Question</p> questionR\u00e9ponse <p>Quel est l'int\u00e9r\u00eat \u00e0 votre avis d'utiliser un outil pour initialiser un projet ?</p> <p>Gain de temps, d\u2019efficacit\u00e9, non redondance des taches, automatisation de ce qui peut l\u2019\u00eatre.</p> <p>Configurer le projet</p> <p>Configurer le projet : .env Le projet qui vient d'\u00eatre cr\u00e9\u00e9 est \u00ab g\u00e9n\u00e9rique \u00bb c'est \u00e0 dire qu'il ne poss\u00e8de aucune personnalisation et peut donc servir de base quelques soit votre d\u00e9veloppement. La premi\u00e8re \u00e9tape est donc d'\u00e9diter le fichier <code>.env</code> pour configurer les options de base de votre projet tel que : - Le nom : ToDoList - Le type de base de donn\u00e9es - \u2026</p> <p>S\u00e9curit\u00e9</p> <p> Cr\u00e9er une base de donn\u00e9es <code>todo2024</code> sous MySQL   cr\u00e9er un user de base de donn\u00e9es \u00e0 p\u00e9rim\u00e8tre restreint pour votre application \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE USER 'todo'@'%' IDENTIFIED WITH mysql_native_password AS '***';GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, FILE, INDEX, ALTER, CREATE TEMPORARY TABLES, CREATE VIEW, EVENT, TRIGGER, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EXECUTE \nON *.* TO 'todo'@'%' ;\nGRANT ALL PRIVILEGES ON `todo2024`.* TO 'todo'@'%'; \n</code></pre></p> <p>Le reste du fichier .env : Nous n'allons pas toucher aux autres param\u00e8tres mais certains sont tout de m\u00eame int\u00e9ressants. Je vous laisse donc consulter la documentation en ligne de laravel.</p>"},{"location":"4_Laravel/4.2_toDo/4.2.1_initialisation/#conception-de-la-base-de-donnees","title":"Conception de la base de donn\u00e9es","text":"<p>Ce qui donnera le calcul du MPD suivant :  TODO (id, texte, termine,important timestamp) CATEGORIE(idcat, libelle) CATEGORISE (id,idcat)</p>"},{"location":"4_Laravel/4.2_toDo/4.2.1_initialisation/#creation-de-la-migration","title":"Cr\u00e9ation de la \u00ab migration \u00bb","text":"<p>Laravel utilise un ORM pour manipuler la base de donn\u00e9es. Pour rappel un ORM est Un mapping objet-relationnel (en anglais object-relational mapping) est une technique de programmation informatique qui cr\u00e9e l'illusion d'une base de donn\u00e9es orient\u00e9e objet \u00e0 partir d'une base de donn\u00e9es relationnelle en d\u00e9finissant des correspondances entre cette base de donn\u00e9es et les objets du langage utilis\u00e9. L'ORM utilis\u00e9 par Laravel est Eloquent, il est \u00e0 la fois puissant et relativement simple. Autrement dit avec un ORM dans la plus part des cas vous n'\u00e9crivez plus de requ\u00eate SQL mais vous manipulez des objets repr\u00e9sentant la base de donn\u00e9es.</p> <p>Comme pour la cr\u00e9ation du projet, la cr\u00e9ation de la d\u00e9finition de vos table va se faire via une requ\u00eate dans votre terminal en utilisant Artisan.</p> <p>\ud83d\udccb Texte<pre><code>php artisan make:migration create_todo_table --create=todo\n</code></pre> \ud83d\udccb Texte<pre><code>INFO  Migration [C:\\wamp64\\www\\todo2024\\database\\migrations/2023_11_21_084423_create_todo_table.php] created successfully.\n</code></pre></p> <p>L\u2019option <code>--create=todo</code> dans la premi\u00e8re m\u00e9thode permet d\u2019indiquer le nom du mod\u00e8le de la table \u00e0 cr\u00e9er. La commande vient de cr\u00e9er un nouveau fichier dans le dossier database/migration. Dans mon cas le fichier se nomme : /todo2024/database/migrations/2023_11_21_084423_create_todo_table.php</p> contenu du fichier PHP<pre><code>&lt;?php\n\n    use Illuminate\\Database\\Migrations\\Migration;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Support\\Facades\\Schema;\n\n    return new class extends Migration\n    {\n        /**\n         * Run the migrations.\n         */\n        public function up(): void\n        {\n            Schema::create('todo', function (Blueprint $table) {\n                $table-&gt;id();\n                $table-&gt;timestamps();\n            });\n        }\n\n        /**\n         * Reverse the migrations.\n         */\n        public function down(): void\n        {\n            Schema::dropIfExists('todo');\n        }\n    };\n</code></pre> <p>\u270b Le contenu du fichier cr\u00e9\u00e9 est fictif, il est l\u00e0 pour illustrer comment travailler. Nous allons le modifier pour mettre les informations relatives \u00e0 notre table.</p> Questions Questionr\u00e9ponse <p>Il y a d'autres fichiers dans votre r\u00e9pertoire de migration. A quoi servent ils ? )</p> <ul> <li>table users : c\u2019est une migration de base pour cr\u00e9er une table des utilisateurs,</li> <li>table password_resets : c\u2019est une migration li\u00e9e \u00e0 la pr\u00e9c\u00e9dente qui permet de g\u00e9rer le renouvellement des mots de passe en toute s\u00e9curit\u00e9.</li> </ul> Questions Questionr\u00e9ponse <p>Quels sont les champs par d\u00e9faut dans la cr\u00e9ation d\u2019une table simple ?</p> <p> et </p> <p>PHP<pre><code>$table-&gt;integer('id');\n$table-&gt;timestamps();\n</code></pre> les deux champs ont une syntaxe particuli\u00e8re. Ce sont des fonctions propres \u00e0 Laravel. Il en existe beaucoup dans la .</p> <p>Nous allons d\u00e9finir notre sch\u00e9ma  pour y ajouter les 3 colonnes qui nous serons utiles texte, termine et important. L'ORM \u00e9tant une librairie objet, la d\u00e9finition de nouveaux champs se fait via une m\u00e9thode, dans notre cas :</p> \ud83d\udccb Texte<pre><code>```php\n$table-&gt;string('texte');\n$table-&gt;boolean('termine')-&gt;default(0);\n$table-&gt;boolean('important')-&gt;default(0);\n```\n</code></pre> fonction up PHP<pre><code>public function up(): void\n{\n    Schema::create('todo', function (Blueprint $table) {\n        $table-&gt;integer('id');\n        $table-&gt;string('texte');\n        $table-&gt;boolean('termine')-&gt;default(0);\n        $table-&gt;boolean('important')-&gt;default(0);\n        $table-&gt;primary('id');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>Ajouter les deux champs dans la m\u00e9thode <code>up</code> du fichier.</p> Questions QuestionR\u00e9ponses <p>\u00c0 quoi correspond la m\u00e9thode up et down ? L'ordre des champs est-il important ?</p>"},{"location":"4_Laravel/4.2_toDo/4.2.1_initialisation/#creation-en-base","title":"Cr\u00e9ation en base","text":"<p>Maintenant que le script est termin\u00e9, nous allons indiquer \u00e0 Laravel d'effectuer \u00ab la migration \u00bb c'est-\u00e0-dire de transformer votre d\u00e9finition PHP en instruction SQL pour cr\u00e9er r\u00e9ellement la base de donn\u00e9es. </p> <p>Checklist</p> <ul> <li> base de donn\u00e9es <code>todo</code> cr\u00e9\u00e9e</li> <li> user base de donn\u00e9e cr\u00e9\u00e9</li> <li> .env mis \u00e0 jour</li> <li> m\u00e9tode <code>up</code> de la migration mise \u00e0 jour</li> </ul> <p></p> <p>Remplacer dans config/database.php</p> PHP<pre><code>'charset' =&gt; 'utf8mb4',\n'collation' =&gt; 'utf8mb4_unicode_ci',\n#Par \n'charset' =&gt; 'utf8',\n'collation' =&gt; 'utf8_unicode_ci',\n#et \n'engine' =&gt; null,\n#par\n'engine' =&gt; 'InnoDB',\n</code></pre> <p>Retour dans la ligne de commande :</p> <p>\ud83d\udccb Texte<pre><code>php artisan migrate:fresh  \n\n  Dropping all tables ..................................................................................................... 146ms DONE\n\n   INFO  Preparing database.\n\n  Creating migration table ................................................................................................. 16ms DONE  \n\n   INFO  Running migrations.\n\n  2014_10_12_000000_create_users_table ..................................................................................... 21ms DONE  \n  2014_10_12_100000_create_password_reset_tokens_table ..................................................................... 13ms DONE  \n  2019_08_19_000000_create_failed_jobs_table ............................................................................... 22ms DONE  \n  2019_12_14_000001_create_personal_access_tokens_table .................................................................... 21ms DONE  \n  2023_11_21_084423_create_todo_table ...................................................................................... 21ms DONE  \n</code></pre> V\u00e9rifier votre console et votre travail dans phpMyAdmin. Puis passer vos tables todo et user en moteur InnoDB au lieu de MyISAM. </p> <p>A faire</p> Mod\u00e8le relationnel <p>Faites la m\u00eame chose avec les tables CATEGORIE et CATEGORISE Sachant que CATEGORISE poss\u00e8de \u00e9galement deux cl\u00e9s \u00e9trang\u00e8res.</p> <p>=== \"Correction     La difficult\u00e9 ici est de cr\u00e9er la bonne relation entre cl\u00e9s primaires et cl\u00e9s \u00e9trang\u00e8res.     Pour rappel, en Base de donn\u00e9es, on ne peut r\u00e9f\u00e9rencer un champ en cl\u00e9 \u00e9trang\u00e8re vers une cl\u00e9 primaire que si les deux champs sont exactement du MEME type. or ici, si on utilise <code>id()</code> pour cat\u00e9gorie, on aura du mal \u00e0 construire la cl\u00e9 \u00e9trang\u00e8re dans la table CATEGORISE</p> \ud83d\udccb Texte<pre><code>```php\npublic function up(): void\n{\n    Schema::create('categorie', function (Blueprint $table) {\n        $table-&gt;integer('idcat');\n        $table-&gt;string('libelle');\n        $table-&gt;primary('idcat');\n        $table-&gt;timestamps();\n    });\n}\n\npublic function up(): void\n{\n    Schema::create('categorise', function (Blueprint $table) {\n        $table-&gt;integer('idcat');\n        $table-&gt;integer('idtodo');\n\n        $table-&gt;foreign('idcat')-&gt;references('idcat')-&gt;on('categorie');\n        $table-&gt;foreign('idtodo')-&gt;references('id')-&gt;on('todo');\n\n        $table-&gt;primary(['idcat', 'idtodo']);\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>```</p> <p>Votre base de donn\u00e9es est maintenant pr\u00eate \u00e0 \u00eatre utilis\u00e9e. Vous pouvez aller voir le contenu gr\u00e2ce \u00e0 phpMyAdmin. Verifier votre structures et vos contraintes.</p> <p>!!! abstract \"Cours\" :</p> \ud83d\udccb Texte<pre><code>L\u2019ORM eloquent permet de cr\u00e9er une correspondance entre les classes PHP et la base de donn\u00e9es. On peut cr\u00e9er une **classe**`maTable` associ\u00e9e \u00e0 une **table** `maTable`. On pourra acc\u00e9der aux colonnes de la table au travers des propri\u00e9t\u00e9s de la classe et b\u00e9n\u00e9ficier de m\u00e9thodes pour charger un \u00e9l\u00e9ment ou une liste d\u2019\u00e9l\u00e9ments, enregistrer, mettre \u00e0 jour \u2026\n</code></pre> <p>Exemple : $user = User ::find(5) ; Echo $user-&gt;name ; $user-&gt;age=32 ; $user-&gt;save() ; Mod\u00e8le Le mod\u00e8le Maintenant que nous avons fait le script de cr\u00e9ation / migration, nous allons d\u00e9finir notre mod\u00e8le. $ php artisan make:model Todos La commande va cr\u00e9er le fichier Todos.php dans le dossier app/. Ajouter dans la class :     protected $fillable = ['texte', 'termine']; \u26a0\ufe0f Cette propri\u00e9t\u00e9 est optionnelle, elle permet vous autorisera plus tard \u00e0 faire du \u00ab mass-assignment \u00bb c'est \u00e0 dire \u00e0 cr\u00e9er un objet \u00ab Todos \u00bb depuis par exemple le POST HTTP. Le controller Maintenant que nous avons la migration et le mod\u00e8le de notre base de donn\u00e9es, nous allons cr\u00e9er le controller. Pour rappel le controller va faire \u00ab le lien \u00bb entre la base de donn\u00e9es et les appels HTTP. C\u2019est ici que nous allons mettre la logique m\u00e9tier de notre application. R\u00f4le La t\u00e2che d'un contr\u00f4leur est de r\u00e9ceptionner une requ\u00eate (qui a d\u00e9j\u00e0 \u00e9t\u00e9 tri\u00e9e par une route) et de d\u00e9finir la r\u00e9ponse appropri\u00e9e, rien de moins et rien de plus. Voici une illustration du processus :</p> <p>\u2022   Les contr\u00f4leurs servent \u00e0 r\u00e9ceptionner les requ\u00eates tri\u00e9es par les routes et \u00e0 fournir une r\u00e9ponse au client. \u2022   Artisan permet de cr\u00e9er facilement un contr\u00f4leur. \u2022   Il est facile d'appeler une m\u00e9thode de contr\u00f4leur \u00e0 partir d'une route. \u2022   On peut nommer une route qui pointe vers une m\u00e9thode de contr\u00f4leur. Pour commencer nous allons cr\u00e9er \u00ab la structure de base \u00bb de notre controller.</p> <p>php artisan make:controller TodosController Le fichier TodosController.php viens d'\u00eatre cr\u00e9\u00e9 dans le chemin suivant app/Http/Controllers/. Notre code est maintenant pr\u00eat. Nous allons cr\u00e9er les m\u00e9thodes permettant la manipulation de notre base de donn\u00e9es tout en r\u00e9pondant \u00e0 nos probl\u00e9matique d'interface (liste, cr\u00e9ation, terminer, suppression). Nous allons maintenant \u00e9crire une m\u00e9thode pour chaque action. Avec les diff\u00e9rentes conditions n\u00e9cessaires au bon fonctionnement de l'application. La m\u00e9thode \u00ab Liste \u00bb Corriger le chemin de la database La m\u00e9thode \u00ab Liste \u00bb La m\u00e9thode liste est certainement la plus simple, nous allons faire appel \u00e0 la m\u00e9thode all() de Eloquent (ORM pour l\u2019acc\u00e8s \u00e0 la base de donn\u00e9es). Pour \u00e7a cr\u00e9ez une nouvelle m\u00e9thode dans la Class TodoController avec le code suivant. Pour l'instant nous n'allons pas int\u00e9grer \u00c9loquent, mais uniquement d\u00e9finir notre m\u00e9thode. public function liste(){     return \"Liste\"; } Rien de bien compliqu\u00e9, comme vous pouvez le voir. Les autres m\u00e9thodes \u270b Pour l'instant nous allons nous arr\u00eater l\u00e0 pour la partie code PHP. Cette m\u00e9thode est suffisante pour \u00ab tester \u00bb le premier template que nous allons \u00e9crire. Ajout route / Nous allons tester la route /, pour \u00e7a nous allons remplacer le contenu du fichier routes/web.php par : Route::get('/', \"TodosController@liste\"); Vous pouvez relancer votre serveur de test, vous devez maintenant voir afficher \u00ab Liste \u00bb. Cr\u00e9er les templates Nous avons donc maintenant : \u2022   La structure Laravel. \u2022   La d\u00e9finition de notre base de donn\u00e9es. \u2022   Les d\u00e9pendances clients (bootstrap 4\u2026) Nous allons donc pouvoir commencer la cr\u00e9ation des templates. L'organisation du code est quelques choses d'important, elle n'est pas \u00e0 n\u00e9gliger. Un code organis\u00e9 est un code agr\u00e9able \u00e0 r\u00e9diger. Notre vue va \u00eatre d\u00e9coup\u00e9e en 3 partie :</p> <p>\u2022   \u270b Pourquoi le d\u00e9coupage en \u00ab 3 templates \u00bb est-il important ? On retrouve les besoins de d\u00e9coupage que l\u2019on pouvait avoir avec un PHP brut avec les fonctions include ou require. On peut vouloir inclure une portion de code blade pour g\u00e9rer les affichages d\u2019erreurs li\u00e9s aux formulaires dans chaque page qui en poss\u00e8dera un. Ici on mutualisera le code statique commun \u00e0 plusieurs pages. \u2022   Quelle est l'avantage pour le d\u00e9veloppeur ? R\u00e9utilisation de code, maintenabilit\u00e9. Le template principal Nous allons commencer par d\u00e9finir notre \u00ab Template principal \u00bb celui-ci va contenir l'ensemble des \u00e9l\u00e9ments partag\u00e9s sur toutes nos pages \u00e0 savoir : \u2022   Les JS \u2022   Les CSS \u2022   La structure commune</p> @yield('title') Ma Todo List           @yield('content')       <p>Maintenant que nous avons le contenu, nous devons cr\u00e9er un nouveau fichier. \u2022   Cr\u00e9er un nouveau fichier resources/views/template.blade.php \u2022   Copier-Coller le html dans le fichier. \ud83d\udc4f\ud83d\udc4f Bravo, vous venez de cr\u00e9er votre premier template. Questions \u2022   Pourquoi le fichier est-il nomm\u00e9 \u2026.blade.php ? Il utilise le moteur de template blade. Contrairement aux autres moteurs de templates PHP populaires, Blade ne vous emp\u00eache pas d'utiliser du code PHP simple dans vos vues. En fait, toutes les vues Blade sont compil\u00e9es dans du code PHP brut et mises en cache jusqu'\u00e0 ce qu'elles soient modifi\u00e9es, ce qui signifie que Blade n'ajoute pratiquement aucune surcharge \u00e0 votre application.  \u2022   \u00c0 quoi correspond {{ asset('\u2026') }} ? The asset function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS): $url = asset('css/style.css '); -&gt;essaiera de charger /mon-site/ma/route/web/web/css/style.css</p> <p>\u2022   \u00c0 quoi correspond la directive \u00ab yield \u00bb? En quoi est-ce tr\u00e8s important ? Mot cl\u00e9 permet de d\u00e9terminer la partie ou plac\u00e9 le code \u00e0 sustituer. Il permet de g\u00e9rer l\u2019h\u00e9ritage et l\u2019inclusion de mod\u00e8le.</p> <p>\u2022   Est-il possible de d\u00e9finir une \u00ab zone \u00bb o\u00f9 d'autre ressources JS/CSS seront ins\u00e9r\u00e9es lors de l'ex\u00e9cution ? Voir la documentation : https://laravel.com/docs/5.6/blade#stacks Blade propose un syst\u00e8me pour ajouter des \u00e9l\u00e9ments de plusieurs endroits dans une pile avant l\u2019affichage. Il faut utiliser les directives @push, @endpush, @stack.</p> <p>\u2022   Maintenant que vous avez la r\u00e9ponse, ajouter une \u00ab stack \u00bb pour le script et le style dans l'ent\u00eate. Cr\u00e9er un fichier base.css dans le repertoire ressources des css      body {background-color: coral;} Cr\u00e9er un fichier scripts.blade.php dans le r\u00e9pertoire views         //Fichiers scripts.blade.php @push('head')               @endpush Cr\u00e9er un fichier styles.blade.php         //Fichiers styles.blade.php @push('head')              @endpush   Dans template.blade.php     Avant la balise HTML ins\u00e9rer les deux lignes suivantes             @include('scripts')                @include('styles')        Et dans la balise Head            @stack('head') Pour tester, mettez en commentaires la route vers le contr\u00f4leur et remplacer par une route vers le template.  Tester           Une fois votre serveur de d\u00e9veloppement lanc\u00e9, aller sur http://localhost:8000. Que se passe t\u2019il ? Changer votre couleur de fond dans le css base pour voir ? Visualiser votre code source de page. Que se passe t\u2019il ? Installation des d\u00e9pendances client Maintenant que la partie base de donn\u00e9es est pr\u00eate, nous allons nous occuper de la partie visualisation de notre application / site web. Nous allons utiliser bootstrap pour g\u00e9rer la probl\u00e9matique d'affichage et de responsive. Attention m\u00e9thode alternative en cas de soucis avec NodeJS et npm. Si pas de souci, reprendre le TP \u00e0 Installation de Bootsrap 4 via NodeJS + NPM\" Ajout des libraries La structure de base de Laravel n'int\u00e8gre pas Bootsrap, par contre il est possible de l'installer dans votre projet. La fa\u00e7on la plus rapide est d'int\u00e9grer directement dans le  de votre projet les librairies suivantes : \u00c9diter le fichier scripts.blade.php pour ajouter : <p>\u00c9diter le fichier styles.blade.php pour ajouter :</p> <p> Vous venez d'ajouter Jquery, Bootstrap, et l'ensemble des \u00e9l\u00e9ments n\u00e9c\u00e9ssaires \u00e0 son bon fonctionnement. Notre site a \u00e9galement besoin d'une CSS sp\u00e9cifique. Celle-ci doit \u00eatre ajout\u00e9e manuellement. Cr\u00e9er un fichier main.css dans public/css. Mettre le contenu suivant : body{     padding-top: 5rem;   }</p> <p>form.add{     padding-bottom: 10px;   }</p> <p>.pull-right{     float: right;   }</p> <p>.action &gt; .btn{     padding: 1px 7px 1px;   }</p> <p>.oi{     font-size: small; } Ajouter \u00e0 nouveau cette CSS dans le fichier styles.template.php de votre site :  Installation de Bootsrap 4 via NodeJS + NPM\" \u270b Si vous lisez ceci c'est que vous \u00eates sur votre machine, si c'est le cas, sachez que c'est la meilleur fa\u00e7on de faire. (Attention \u00e0 ne pas avoir les librairies en HTTP et Via NodeJS). Ajouter Bootsrap 4 La structure de base de Laravel n'int\u00e8gre pas Bootsrap, par contre elle int\u00e8gre un syst\u00e8me de gestion de d\u00e9pendances. Nous allons nous servir de cette gestion de d\u00e9pendance pour ajouter bootstrap (version 4). Dans la ligne de commande : $ php artisan preset none $ php artisan preset bootstrap Patientez quelques instants\u2026 bootstrap est maintenant disponible pour votre projet. Mais pour qu'il soit accessible pour vos templates nous devons \u00ab le compiler \u00bb. Pr\u00e9paration des \u00ab Assets \u00bb bootsrap \u2026 Laravel inclut une configuration \u00ab webpack.mix.js \u00bb, celle-ci permet de fusionner l'ensemble des JS et CSS en un seul fichier pour gagner en performance. Sans entrer dans le d\u00e9tail, la compilation des ressources (assets) est r\u00e9alis\u00e9e avec Webpack. Webpack est un outils NodeJS tr\u00e8s puissant mais qui peut \u00eatre complexe, nous allons donc uniquement l'utiliser. \u2022   Installer NodeJS version current (https://nodejs.org/en/download/current/ Une fois install\u00e9 retourner dans le dossier de votre projet faites les commandes suivantes : laravel-mix ? laravel-mix est un outil fourni de base dans Laravel qui g\u00e8rent la partie libraries clientes. La configuration de celui-ci se fait dans le fichier webpack.mix.js</p> <p>Le contenu initial est : const mix = require('laravel-mix');</p> <p>/*  |--------------------------------------------------------------------------  | Mix Asset Management  |--------------------------------------------------------------------------  |  | Mix provides a clean, fluent API for defining some Webpack build steps  | for your Laravel application. By default, we are compiling the Sass  | file for the application as well as bundling up all the JS files.  |  */</p> <p>mix.js('resources/js/app.js', 'public/js')    .sass('resources/sass/app.scss', 'public/css'); Modifier le SCSS Remplacer le fichier ressources/sass/app/scss par : // Fonts @import url('https://fonts.googleapis.com/css?family=Nunito');</p> <p>// Variables @import 'variables';</p> <p>// Bootstrap @import '~bootstrap/scss/bootstrap';</p> <p>.navbar-laravel {   background-color: #fff;   box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04); }</p> <p>body{   padding-top: 5rem; }</p> <p>form.add{   padding-bottom: 10px; }</p> <p>.pull-right{   float: right; }</p> <p>.action &gt; .btn{   padding: 1px 7px 1px; }</p> <p>.oi{   font-size: small; }</p> <p>Transpiler</p> <p>npm install npm run production \ud83d\udd0e Plus d'informations Webpack.mix.js</p> <p>Questions  Questions \u2022   Quels fichiers ont \u00e9t\u00e9 cr\u00e9\u00e9s ? \u2022   Que contient le fichier webpack.mix.js ? \u2022   webpack.mix.js fait r\u00e9f\u00e9rence \u00e0 des fichiers dans ressources/js/* et ressources/sass/*, allez y jeter un coup d'oeil (m\u00eame si dans ce projet nous n'allons rien modifier). \u2022   Pourquoi la fusion / compilation des ressources est-elle si importante ? Modifications demand\u00e9s \u270b Cette modification n'est n\u00e9cessaire que dans le cas o\u00f9 vous n'utilisez pas NodeJS + NPM. Comme vous l'avez vu avec le fichier main.css il est possible d'avoir un CSS / JS en local dans le dossier public. \u2022   T\u00e9l\u00e9charger l'ensemble de librairies http / https (css + js) dans le dossier public (attention \u00e0 bien les ranger) et les utiliser dans votre head. Question Liste des todos Maintenant que nous avons d\u00e9fini notre template de base nous allons pouvoir d\u00e9finir notre page principale, la page \u00ab liste des todos \u00bb. Une fois termin\u00e9e celle-ci va ressembler \u00e0 :</p> <p>Avant de commencer la r\u00e9alisation de ce template, regardons ce que l'on peut y voir : \u2022   Un formulaire \u00ab form \u00bb \u2022   Une \u00ab liste \u00bb Nous allons donc avoir besoin de composant bootstrap. Premi\u00e8re \u00e9tape regarder la documentation de bootsrap (https://getbootstrap.com/docs/4.0/components/alerts/) !  Questions \u2022   Quels composants (components) allons-nous avoir besoins ? Gestion des messages d\u2019erreur pour g\u00e9rer la saisie dans le formulaire \u2022   Est-ce que ce sont les seuls ? D\u00e9finition du template \u00ab Liste \u00bb / \u00ab Home \u00bb Nous allons cr\u00e9er un 2nd template celui qui va \u00eatre charg\u00e9 d'afficher la liste des todos.  Cr\u00e9\u00e9r un nouveau fichier resources/views/home.blade.php et y mettre le contenu suivant : @extends(\"template\")</p> <p>@section(\"title\", \"Ma Todo List\")</p> <p>@section(\"content\")      \ud83d\udccb Texte<pre><code>            &lt;!-- Liste --&gt;\n            &lt;ul class=\"list-group\"&gt;\n                @forelse ($todos as $todo)\n                    &lt;li class=\"list-group-item\"&gt;\n                        &lt;span&gt;{{ $todo-&gt;texte }}&lt;/span&gt;\n                        &lt;!-- Action \u00e0 ajouter pour Terminer et supprimer --&gt;\n                    &lt;/li&gt;\n                @empty\n                    &lt;li class=\"list-group-item text-center\"&gt;C'est vide !&lt;/li&gt;\n                @endforelse\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>@endsection \ud83e\udd13 Questions \u2022   @extends ? \u00c0 quoi sert cette directive, pourquoi \u00ab template \u00bb? \u2022   Modifier le titre affich\u00e9 dans la barre. \u2022   \u00c0 quoi correspond le @forelse \u2026 @empty \u2026 @endforelse? Et maintenant ? Bien\u2026 r\u00e9cupitulons ! Nous avons : \u2022   Le modele. \u2022   Le contr\u00f4leur. \u2022   Les templates (template et home). Il faut maintenant assembler l'ensemble pour que votre page s'affiche lors d'une requ\u00eate. Cr\u00e9ation des routes La d\u00e9finition des routes se fait dans le fichier routes/web.php pour l'instant vous devez avoir qu'une seule route de d\u00e9finie. Supprimer l\u00e0, et ajouter : Route::get('/', \"TodosController@liste\"); \ud83e\udd13 Question \u2022   \u00c0 quoi correspond la notation TodosController@liste ? Tester Vous voyez \u00ab Liste \u00bb ? C'est OK ! Affichage de la liste Bon afficher \u00ab Liste \u00bb c'est un bon d\u00e9but\u2026 Modifier la m\u00e9thode liste() pour qu'elle ressemble \u00e0 :     return view(\"home\", [\"todos\" =&gt; Todos::all()]); Tester La page s'affiche ? Super ! \u2022   Ajouter une entr\u00e9e \u00ab \u00e0 la main \u00bb gr\u00e2ce \u00e0 l'explorateur de base de donn\u00e9es de PHPStorm. Rafraichissez la page, vous devez maintenant voir votre texte \ud83d\ude0e.</p>"},{"location":"5_Programmation_SQL/sommaire/","title":"Sommaire","text":"<p>Comp\u00e9tences</p> <p>B2.3 SLAM G\u00e9rer les donn\u00e9es D\u00e9velopper des fonctionnalit\u00e9s applicatives au sein d\u2019un syst\u00e8me de gestion de base de donn\u00e9es (relationnel ou non)</p> <p>R\u00e9pondre aux incidents et aux demandes d'assistance et d'\u00e9volution</p> <p>Bibliographie</p> <ul> <li>Cours de Transat SQL : Pr H.LAARAJ</li> <li>Aide Transact-SQL \u00e0 partir de SQL Server</li> <li>Cours de SGBD Pr. Naoual ABDALLAH</li> <li>Gestion des proc\u00e9dures stock\u00e9es en MySQL</li> <li>OPenclassRoom</li> </ul>"},{"location":"5_Programmation_SQL/sommaire/#contexte","title":"Contexte","text":"<p>La base de donn\u00e9es GestionCom  sera utilis\u00e9e en appplication de ce cours est comme suivante :</p> <p></p> <p></p> <p>Script de cr\u00e9ation de la base GESCOM</p> A faireCorrection <p>Cr\u00e9er le script de cr\u00e9ation de la base de donn\u00e9es (Attention \u00e0 int\u00e9grer les contraintes d\u2019int\u00e9grit\u00e9). Attention pour les besoins de ce TP, nous aurons besoin que les tables soient TRANSACTIONNELLES.  MyISAM ne supportant pas les contraintes de cl\u00e9s \u00e9trang\u00e8res, les tables doivent \u00eatre cr\u00e9\u00e9es avec le moteur InnoDB. En effet : -   \ud83d\udcccles tables MyISAM sont non transactionnelles, donc ne supportent pas les transactions. -   \ud83d\udcccles tables InnoDB sont transactionnelles, donc supportent les transactions.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>USE gescom;\nCREATE TABLE COMMANDE (\nNumcom int PRIMARY KEY,\nDatcom DATETIME)ENGINE=InnoDB;\n\nCREATE TABLE ARTICLE (\nNumart int PRIMARY KEY,\nDesart varchar(50),\nPUart decimal(10,2),\nQteEnStock int,\nSeuilMin int,\nSeuilMax int)ENGINE=InnoDB;\n\nCREATE TABLE LIGNECOMMANDE (\nNumcom int,\nNumart int,\nQteCommandee int,\nCONSTRAINT pk_lc PRIMARY KEY (numcom, numart),\nCONSTRAINT fk_lc_com FOREIGN KEY (Numcom) REFERENCES COMMANDE(Numcom),\nCONSTRAINT fk_lc_art FOREIGN KEY (Numart) REFERENCES ARTICLE(Numart)\n)ENGINE=InnoDB;\n</code></pre> <p>N'oubliez pas de cr\u00e9er votre jeu de donn\u00e9es au fur et \u00e0 mesure pour tester les applications de cours</p> <ol> <li>Proc\u00e9dures stock\u00e9es </li> <li>Le transactionnel </li> <li>Les curseurs </li> <li>Triggers et d\u00e9clencheurs </li> </ol>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/","title":"Les proc\u00e9dures stock\u00e9es","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#1-definition","title":"1. D\u00e9finition","text":"<p>MySQL est un langage proc\u00e9dural (par opposition \u00e0 SQL qui est un langage d\u00e9claratif). Il permet de programmer des algorithmes de traitement des donn\u00e9es au sein des SGBDR (ici MySQL, on aura PL/SQL pour oracle, TRANSACT/SQL pour SQL Server). MySQL n'a aucun aspect normatif contrairement \u00e0 SQL. C'est bien un \"produit\" au sein commercial du terme. En revanche depuis SQL2 et plus fortement maintenant, avec SQL3, la norme SQL a pr\u00e9vu les \u00e9l\u00e9ments de langage proc\u00e9dural normatif propre au langage SQL. Mais il y a une tr\u00e8s grande diff\u00e9rence entre la norme du SQL proc\u00e9dural et la programmation BD.</p> <p>Les proc\u00e9dures stock\u00e9es sont disponibles depuis la version 5 de MySQL.  \u23e9 Elles permettent d'automatiser des actions qui peuvent \u00eatre tr\u00e8s complexes. Une proc\u00e9dure stock\u00e9e est en fait une s\u00e9rie d'instructions SQL d\u00e9sign\u00e9e par un nom. Lorsque l'on cr\u00e9e une proc\u00e9dure stock\u00e9e, on l'enregistre dans la base de donn\u00e9es que l'on utilise, au m\u00eame titre qu'une table, par exemple. Une fois la proc\u00e9dure cr\u00e9\u00e9e, il est possible d'appeler celle-ci par son nom. Les instructions de la proc\u00e9dure sont alors ex\u00e9cut\u00e9es. Contrairement aux requ\u00eates pr\u00e9par\u00e9es, qui ne sont gard\u00e9es en m\u00e9moire que pour la session courante, les proc\u00e9dures stock\u00e9es sont, comme leur nom l'indique, stock\u00e9es de mani\u00e8re durable, et font bien partie int\u00e9grante de la base de donn\u00e9es dans laquelle elles sont enregistr\u00e9es.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#creation-dune-procedure-stockee","title":"Cr\u00e9ation d\u2019une proc\u00e9dure stock\u00e9e","text":"<p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE PROCEDURE nom_procedure ([parametre1 [, parametre2, ...]])\ncorps de la proc\u00e9dure;\n</code></pre> exemple sur la base gesCom, pour afficher les articles en console :  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE PROCEDURE afficher_liste_articles() \n    -- pas de param\u00e8tres dans les parenth\u00e8ses\nSELECT Desart, PUart FROM article;\n</code></pre> La proc\u00e9dure stock\u00e9e est stock\u00e9e dans la base de donn\u00e9es. Pour ex\u00e9cuter la proc\u00e9dure, il suffit de l\u2019appeler .. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CALL afficher_liste_articles ;\n</code></pre></p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#bloc-dinstructions","title":"Bloc D\u2019instructions","text":"<p>Pour d\u00e9limiter un bloc d'instructions (qui peut donc contenir plus d'une instruction), on utilise les mots BEGIN  et END.</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE PROCEDURE afficher_liste_articles() \n    -- pas de param\u00e8tres dans les parenth\u00e8ses\nBEGIN\nSELECT Desart, PUart FROM article;\nEND ;\n</code></pre> MAIS \u2026 \u00e7a plante ...</p> <p>Les mots-cl\u00e9s sont bons, il n'y a pas de param\u00e8tres, mais les parenth\u00e8ses, BEGIN et END sont tous les deux pr\u00e9sents.  Peut-\u00eatre aurez-vous compris que le probl\u00e8me se situe au niveau du caract\u00e8re <code>;</code> : en effet, un <code>;</code> termine une instruction SQL. Or, on a mis un <code>;</code> \u00e0 la suite de <code>SELECT * FROM article;</code>. Cela semble logique, mais pose probl\u00e8me puisque c'est le premier <code>;</code> rencontr\u00e9 par l'instruction <code>CREATE PROCEDURE</code>, qui naturellement pense devoir s'arr\u00eater l\u00e0. Ceci d\u00e9clenche une erreur puisqu'en r\u00e9alit\u00e9, l'instruction <code>CREATE PROCEDURE</code>  n'est pas termin\u00e9e : le bloc d'instructions n'est pas complet ! \ud83d\udeab Il faut changer le d\u00e9limiteur !</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#delimiteur","title":"D\u00e9limiteur","text":"<p>Ce que l'on appelle d\u00e9limiteur, c'est tout simplement (par d\u00e9faut), le caract\u00e8re <code>;</code>. C'est-\u00e0-dire le caract\u00e8re qui permet de d\u00e9limiter les instructions. Or, il est tout \u00e0 fait possible de d\u00e9finir le d\u00e9limiteur manuellement, de mani\u00e8re \u00e0 ce que <code>;</code> ne signifie plus qu'une instruction se termine. Auquel cas le caract\u00e8re <code>;</code> pourra \u00eatre utilis\u00e9 \u00e0 l'int\u00e9rieur d'une instruction, et donc dans le corps d'une proc\u00e9dure stock\u00e9e.</p> <p>Pour changer le d\u00e9limiteur, il suffit d'utiliser cette commande :</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\n</code></pre> Ce qui donne : </p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE afficher_liste_articles() \n    -- pas de param\u00e8tres dans les parenth\u00e8ses\nBEGIN\nSELECT Desart, PUart FROM article;\nEND |\n</code></pre> Note : Il est possible d'imbriquer plusieurs blocs d'instructions. De m\u00eame, \u00e0 l'int\u00e9rieur d'un bloc d'instructions, plusieurs blocs d'instructions peuvent se suivre. Ceux-ci permettent donc de structurer les instructions en plusieurs parties distinctes et sur plusieurs niveaux d'imbrication diff\u00e9rents.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>BEGIN\n    SELECT 'Bloc d''instructions principal';\n\n    BEGIN\n        SELECT 'Bloc d''instructions 2, imbriqu\u00e9 dans le bloc principal';\n\n        BEGIN\n            SELECT 'Bloc d''instructions 3, imbriqu\u00e9 dans le bloc d''instructions 2';\n        END;\n    END;\n\n    BEGIN\n        SELECT 'Bloc d''instructions 4, imbriqu\u00e9 dans le bloc principal';\n    END;\n\nEND;\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#2-les-parametres-dune-procedure-stockee","title":"2. Les param\u00e8tres d'une proc\u00e9dure stock\u00e9e","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#sens-des-parametres","title":"Sens des param\u00e8tres","text":"<p>Un param\u00e8tre peut \u00eatre de trois sens diff\u00e9rents : entrant (IN),sortant (OUT), ou les deux (INOUT). \u25b6\ufe0f IN  : c'est un param\u00e8tre \"entrant\". C'est-\u00e0-dire qu'il s'agit d'un param\u00e8tre dont la valeur est fournie \u00e0 la proc\u00e9dure stock\u00e9e. Cette valeur sera utilis\u00e9e pendant la proc\u00e9dure (pour un calcul ou une s\u00e9lection, par exemple). \u25b6\ufe0f OUT  : il s'agit d'un param\u00e8tre \"sortant\", dont la valeur sera \u00e9tablie au cours de la proc\u00e9dure et qui pourra ensuite \u00eatre utilis\u00e9 en dehors de cette proc\u00e9dure. \u25b6\ufe0f INOUT  : un tel param\u00e8tre sera utilis\u00e9 pendant la proc\u00e9dure, verra \u00e9ventuellement sa valeur modifi\u00e9e par celle-ci, et sera ensuite utilisable en dehors.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#syntaxe","title":"Syntaxe","text":"<p>Lorsque l'on cr\u00e9e une proc\u00e9dure avec un ou plusieurs param\u00e8tres, chaque param\u00e8tre est d\u00e9fini par trois \u00e9l\u00e9ments. \u25b6\ufe0f Son sens : entrant, sortant, ou les deux. Si aucun sens n'est donn\u00e9, il s'agira d'un param\u00e8tre IN  par d\u00e9faut. \u25b6\ufe0f Son nom : indispensable pour le d\u00e9signer \u00e0 l'int\u00e9rieur de la proc\u00e9dure. \u25b6\ufe0f Son type : INT, VARCHAR(10)\u2026</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#procedure-avec-un-seul-parametre-entrant","title":"Proc\u00e9dure avec un seul param\u00e8tre entrant","text":"<p>Voici une proc\u00e9dure qui renvoie l\u2019article selon son id pass\u00e9 en param\u00e8tre : </p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER | -- Facultatif si votre d\u00e9limiteur est toujours |\nCREATE PROCEDURE afficher_article_par_id (IN p_id INT)  \n    -- D\u00e9finition du param\u00e8tre p_espece_id\nBEGIN\n    SELECT desart, PUart\n    FROM article\n    WHERE Numart = p_id;  -- Utilisation du param\u00e8tre\nEND |\nDELIMITER ;  -- On remet le d\u00e9limiteur par d\u00e9faut\n</code></pre> Pour utiliser la proc\u00e9dure </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CALL afficher_article_par_id(1);\nSET @var := 2;\nCALL afficher_article_par_id(@var);\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#la-declaration-dune-variable","title":"La d\u00e9claration d\u2019une variable","text":"<p>MySQL reconna\u00eet diff\u00e9rents types de variables. Le premier type est celui des variables d\u00e9finies par l\u2019utilisateur, identifi\u00e9es par un symbole <code>@</code> utilis\u00e9 comme pr\u00e9fixe. Dans MySQL, vous pouvez acc\u00e9der aux variables d\u00e9finies par l\u2019utilisateur sans les d\u00e9clarer ou les initialiser au pr\u00e9alable. Si vous le faites, une valeur <code>NULL</code> est attribu\u00e9e \u00e0 la variable lors de son initialisation. Par exemple, si vous utilisez <code>SELECT</code> avec une variable sans lui donner de valeur, comme dans ce cas :</p> <p>Exemples :</p> <ul> <li><code>SELECT @var1;</code>  /* MySQL retourne une valeur NULL. */</li> <li><code>SELECT @FirstVar=1, @SecondVar=2;</code></li> </ul> <p>Une fois que vous avez assign\u00e9 une valeur \u00e0 une variable, elle aura un type en fonction de la valeur donn\u00e9e. Dans les exemples pr\u00e9c\u00e9dents, <code>@FirstVar</code> et <code>@SecondVar</code> sont de type <code>int</code>.</p> <p>Les variables peuvent faire partie des listes de champs d\u2019une d\u00e9claration <code>SELECT</code>. Vous pouvez m\u00e9langer les variables et les noms de champs lorsque vous sp\u00e9cifiez des champs dans une s\u00e9lection, comme dans cet exemple :</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SET @IndexVar = 1;\nSELECT Desart FROM article WHERE numart= @IndexVar;\n</code></pre> //Ou pour un autre usage \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SET @IndexVar = (SELECT PUart FROM article WHERE numart = 1);\nSELECT Desart FROM article WHERE PUart = @IndexVar ;\n</code></pre></p> <p>Remarque : Par convention les noms des variables doivent toujours \u00eatre pr\u00e9c\u00e9d\u00e9s du symbole <code>@</code></p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#affichage-dinformations","title":"Affichage d\u2019informations","text":"<p>Syntaxe : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT El\u00e9ment_A_Afficher\n</code></pre> exemple : </p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SET @IndexVar = (SELECT PUart FROM article);\nSELECT @IndexVar, Desart\nFROM article;\nSELECT concat(\"La variable est \", convert(@IndexVar, CHAR));\n</code></pre> Explication : Affiche la valeur de <code>@c</code> concat\u00e9n\u00e9 avec la valeur de <code>@b</code> mais puisque <code>@c</code> est de type num\u00e9rique et qu'on ne peut jamais concat\u00e9ner une valeur num\u00e9rique avec une valeur cha\u00eene de caract\u00e8res, il faut passer par une fonction de conversion dont la syntaxe est la suivante : <code>Convert (Type de conversion, Valeur \u00e0 convertir)</code> Doc ici</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#procedure-avec-deux-parametres-un-entrant-et-un-sortant","title":"Proc\u00e9dure avec deux param\u00e8tres, un entrant et un sortant","text":"<p>Voici une proc\u00e9dure assez similaire \u00e0 la pr\u00e9c\u00e9dente, si ce n'est qu'elle n'affiche pas l\u2019article pass\u00e9 en param\u00e8tres, mais compte combien il y a d\u2019articles avec un stock &gt;= \u00e0 5 et dont le prix pass\u00e9 en param\u00e8tre est inf\u00e9rieur, puis stocke cette valeur dans un param\u00e8tre sortant.</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |                                                      \nCREATE PROCEDURE nb_art_petit_prix (prix INT, OUT stock INT)  \nBEGIN\n    SELECT COUNT(*) INTO stock\n    FROM article\n    WHERE PUart &lt;= prix;                               \nEND |\nDELIMITER ;\n</code></pre> \u25b6\ufe0f Pour appeler la procedure</p> <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CALL nb_art_petit_prix(9, @st);\nSELECT @st;\n</code></pre> \u25b6\ufe0f Pour pouvoir l'utiliser, il est n\u00e9cessaire que le SELECT  ne renvoie qu'une seule ligne, et il faut que le nombre de valeurs s\u00e9lectionn\u00e9es et le nombre de variables \u00e0 assigner soient \u00e9gaux : Exemple 1 : <code>SELECT ... INTO</code>  correct avec deux valeurs \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SELECT id, nom INTO @var1, @var2\nFROM tab1 \nWHERE id = 7;\n\nSELECT @var1, @var2;\n</code></pre> Il existe aussi des Proc\u00e9dure avec deux param\u00e8tres, un entrant et un entrant-sortant.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#variables-locales","title":"Variables locales","text":"<p>Nous connaissons d\u00e9j\u00e0 les variables utilisateur, qui sont des variables d\u00e9sign\u00e9es par <code>@</code>. Il existe aussi des variables syst\u00e8me, qui sont des variables pr\u00e9d\u00e9finies par MySQL. Voyons maintenant les variables locales, qui peuvent \u00eatre d\u00e9finies dans un bloc d'instructions.</p> <p>D\u00e9claration d'une variable locale  La d\u00e9claration d'une variable locale se fait avec l'instruction <code>DECLARE</code> juste apres le d\u00e9but du bloc d\u2019instruction : <code>DECLARE nom_variable type_variable [DEFAULT valeur_defaut];</code></p> <p>\u25b6\ufe0f Pour changer la valeur d'une variable locale, on peut utiliser <code>SET</code>  ou <code>SELECT ... INTO</code>.</p> <p>Exemple : voici une proc\u00e9dure stock\u00e9e qui donne la date d'aujourd'hui et de demain. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE aujourdhui_demain ()\nBEGIN\n    DECLARE v_date DATE DEFAULT CURRENT_DATE();               \n    -- On d\u00e9clare une variable locale et on lui met une valeur par d\u00e9faut\n\n    SELECT DATE_FORMAT(v_date, '%W %e %M %Y') AS Aujourdhui;\n\n    SET v_date = v_date + INTERVAL 1 DAY;                     \n    -- On change la valeur de la variable locale\n    SELECT DATE_FORMAT(v_date, '%W %e %M %Y') AS Demain;\nEND|\nDELIMITER ;\n</code></pre> \u25b6\ufe0f Appel :  \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>SET lc_time_names = 'fr_FR';\nCALL aujourdhui_demain();\n</code></pre></p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#3-modification-dune-ps","title":"3. Modification d'une PS","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#suppression-dune-procedure-stockee","title":"Suppression d\u2019une proc\u00e9dure stock\u00e9e","text":"<p>Syntaxe : <code>Drop Procedure Nom_Proc\u00e9dure</code> ;</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#modification-dune-procedure-stockee","title":"Modification d\u2019une proc\u00e9dure stock\u00e9e","text":"<p>Syntaxe : ALTER Procedure Nom_Proc\u00e9dure as Nouvelles instructions</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#4-les-structures-de-mysql","title":"4. Les structures de MySQL","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#les-structures-alternatives","title":"les structures alternatives","text":"<p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>IF condition THEN instructions\n[ELSEIF autre_condition THEN instructions\n[ELSEIF ...]]\n[ELSE instructions]\nEND IF;\n</code></pre> Exemple : la proc\u00e9dure suivante affiche 'n\u00e9 avant 2010'  ou 'n\u00e9 apr\u00e8s 2010', selon la date de naissance de l'animal transmis en param\u00e8tre.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE avant_apres_2010(IN p_animal_id INT)\nBEGIN\n    DECLARE v_annee INT;\n\n    SELECT YEAR(date_naissance) INTO v_annee\n    FROM Animal\n    WHERE id = p_animal_id;\n\n    IF v_annee &lt; 2010 THEN\n        SELECT 'n\u00e9 avant 2010' AS naissance;\n    ELSE    -- Pas de THEN\n        SELECT 'n\u00e9 apr\u00e8s 2010' AS naissance;\n    END IF; -- Toujours obligatoire\n\nEND |\nDELIMITER ;\n\nCALL avant_apres_2010(34);   -- N\u00e9 le 20/04/2008\nCALL avant_apres_2010(69);   -- N\u00e9 le 13/02/2012\n</code></pre> <p>Application</p> Enonc\u00e9Correction <p>On souhaite v\u00e9rifier le stock de l'article pass\u00e9 en param\u00e8tre. Si le stock a atteint le seuil minimum, afficher le message 'Rupture de stock'. Sinon afficher 'Stock disponible' \u25b6\ufe0f Ecrire la proc\u00e9dure stock\u00e9e verifier_stock() </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>/* On souhaite v\u00e9rifier si le stock de l'article pass\u00e9 en param\u00e8tre a atteint son seuil minimum.\nSi c'est le cas afficher le message 'Rupture de stock' : */\nDELIMITER |\nCREATE PROCEDURE affichage_rupture(num INT)\nBEGIN\n    SET @QS = (Select QteEnStock from article Where NumArt =num) ;\n    SET @SM = (Select SeuilMin from article Where NumArt =num); \n    If @QS&lt;=@SM THEN\n        SELECT 'Rupture de stock' ;\n    Else \n        SELECT 'Stock disponible' ;\n    END IF;\nEND |\nDELIMITER ;\n\nCALL affichage_rupture2(1)\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#linstruction-case","title":"L\u2019instruction case","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CASE valeur_a_comparer\n    WHEN possibilite1 THEN instructions\n    [WHEN possibilite2 THEN instructions] ...\n    [ELSE instructions]\nEND CASE;\n</code></pre> <p>Application</p> Enonc\u00e9correction <p>on reprend la proc\u00e9dure <code>avant_apres_2010()</code>, que l'on r\u00e9\u00e9crit avec <code>CASE</code>, et en passant  le message en param\u00e8tre OUT pour changer un peu.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE avant_apres_2010_case (IN p_animal_id INT, OUT p_message VARCHAR(100))\n BEGIN\n    DECLARE v_annee INT;\n\n    SELECT YEAR(date_naissance) INTO v_annee\n    FROM Animal\n    WHERE id = p_animal_id;\n\n    CASE\n        WHEN v_annee &lt; 2010 THEN\n            SET p_message = 'Je suis n\u00e9 avant 2010.';\n        WHEN v_annee = 2010 THEN\n            SET p_message = 'Je suis n\u00e9 en 2010.';\n        ELSE\n            SET p_message = 'Je suis n\u00e9 apr\u00e8s 2010.';   \n    END CASE;\nEND |\nDELIMITER ;\n\nCALL avant_apres_2010_case(59, @message);   \nSELECT @message;\nCALL avant_apres_2010_case(62, @message);   \nSELECT @message;\nCALL avant_apres_2010_case(69, @message);\nSELECT @message;\n</code></pre> <p>Il faut au minimum une instruction ou un bloc d'instructions par clause <code>WHEN</code>  et par clause <code>ELSE</code>. Un bloc vide <code>BEGIN END;</code>  est donc n\u00e9cessaire si l'on ne veut rien ex\u00e9cuter.</p> <p>Application</p> Enonc\u00e9Correction <p>Afficher la liste des articles (Num\u00e9ro, D\u00e9signation et prix) avec en plus une colonne Observation qui affiche 'Non Disponible' si la quantit\u00e9 en stock est \u00e9gale \u00e0 0, 'Disponible' si la quantit\u00e9 en stock est sup\u00e9rieure au stock Minimum et '\u00e0 Commander' sinon. \u25b6\ufe0f Ecrire la PS correspondante </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE affichage_rupture4()\nBEGIN\n    Select NumArt, DesArt, PUArt,\n        Case\n            When QteEnStock=0 then 'Non Disponible'\n            When QteEnStock&gt;SeuilMinimum then 'Disponible'\n            Else '\u00e0 Commander'\n        END AS observation\n        FROM article ;\nEND |\nDELIMITER ;\nCALL affichage_rupture4();\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#les-structures-repetitives","title":"les structures r\u00e9p\u00e9titives","text":"<p>Une boucle est une structure qui permet de r\u00e9p\u00e9ter plusieurs fois une s\u00e9rie d'instructions. Il existe trois types de boucles en MySQL : <code>WHILE</code>, <code>LOOP</code>  et <code>REPEAT</code>.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#la-boucle-while","title":"La boucle WHILE","text":"<p>La boucle WHILE  permet de r\u00e9p\u00e9ter une s\u00e9rie d'instructions tant que la condition donn\u00e9e reste vraie.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>WHILE condition DO    \n    -- Attention de ne pas oublier le DO, erreur classique\n    instructions\nEND WHILE;\n</code></pre> <p>Exemple : la proc\u00e9dure suivante affiche les nombres entiers de 1 \u00e0 p_nombre (pass\u00e9 en param\u00e8tre).</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE compter_jusque_while(IN p_nombre INT)\nBEGIN\n    DECLARE v_i INT DEFAULT 1;\n\n    WHILE v_i &lt;= p_nombre DO\n        SELECT v_i AS nombre; \n\n        SET v_i = v_i + 1;    \n        -- \u00c0 ne surtout pas oublier, sinon la condition restera vraie\n    END WHILE;\nEND |\nDELIMITER ;\nCALL compter_jusque_while(3);\n</code></pre> <p>Application</p> EnonceCorrection <p>Tant que la moyenne des prix des articles n'a pas encore atteint 20 EUROS et le prix le plus \u00e9lev\u00e9 pour un article n'a pas encore atteint 30 EUROS, augmenter les prix de 10% et afficher apr\u00e8s chaque modification effectu\u00e9e la liste des articles. Une fois toutes les modifications effectu\u00e9es, afficher la moyenne des prix et le prix le plus \u00e9lev\u00e9. \u25b6\ufe0f Ecrire la PS correspondante </p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE application_while()\nBEGIN\n    SET @moyPUart = (Select avg(PUart) from article);\n    SET @maxPUart =(select max(PUart) from article);\n    WHILE (@moyPUart &lt;20  and @maxPUart &lt;30) DO\n        Update article Set puart=puart+(puart*10)/100;\n        /* Select * from article ; */\n    END WHILE ;\n    Select avg(PUart) as moyenne , max(PUart) as Prix_\u00e9lev\u00e9 from article ;\nEND |\nDELIMITER ;\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#la-boucle-repeat","title":"La boucle REPEAT","text":"<p>La boucle REPEAT  travaille en quelque sorte de mani\u00e8re oppos\u00e9e \u00e0 WHILE, puisqu'elle ex\u00e9cute des instructions de la boucle jusqu'\u00e0 ce que la condition donn\u00e9e devienne vraie.</p> <p>Exemple : voici la m\u00eame proc\u00e9dure \u00e9crite avec une boucle REPEAT.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE compter_jusque_repeat(IN p_nombre INT)\nBEGIN\n    DECLARE v_i INT DEFAULT 1;\n\n    REPEAT\n        SELECT v_i AS nombre; \n\n        SET v_i = v_i + 1;    \n        -- \u00c0 ne surtout pas oublier, sinon la condition restera vraie\n    UNTIL v_i &gt; p_nombre END REPEAT;\nEND |\nDELIMITER ;\n\nCALL compter_jusque_repeat(3);\n\n-- Condition fausse d\u00e8s le d\u00e9part, on ne rentre pas dans la boucle\nCALL compter_jusque_while(0);   \n\n-- Condition fausse d\u00e8s le d\u00e9part, on rentre quand m\u00eame une fois dans la boucle\nCALL compter_jusque_repeat(0);\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#la-boucle-loop","title":"La boucle LOOP","text":"<p>On a gard\u00e9 la boucle LOOP  pour la fin, parce qu'elle est un peu particuli\u00e8re. En effet, voici sa syntaxe : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>[label:] LOOP\n    instructions\nEND LOOP [label]\n</code></pre> Il n'est question de condition nulle part. En fait, une boucle LOOP doit int\u00e9grer dans ses instructions un \u00e9l\u00e9ment qui va la faire s'arr\u00eater : typiquement, une instruction LEAVE. Sinon, c'est une boucle infinie.</p> <p>Exemple : \u00e0 nouveau une proc\u00e9dure qui affiche les nombres entiers de <code>1 \u00e0 p_nombre</code>. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE compter_jusque_loop(IN p_nombre INT)\nBEGIN\n    DECLARE v_i INT DEFAULT 1;\n\n    boucle_loop: LOOP\n        SELECT v_i AS nombre; \n\n        SET v_i = v_i + 1;\n\n        IF v_i &gt; p_nombre THEN\n            LEAVE boucle_loop;\n        END IF;    \n    END LOOP;\nEND |\nDELIMITER ;\n\nCALL compter_jusque_loop(3);\n</code></pre></p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#5-avantages-inconvenients-et-usage-des-procedures-stockees","title":"5. Avantages, inconv\u00e9nients et usage des proc\u00e9dures stock\u00e9es","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#avantages","title":"Avantages","text":"<p>Les proc\u00e9dures stock\u00e9es permettent de r\u00e9duire les allers-retours entre le client et le serveur MySQL. En effet, si l'on englobe en une seule proc\u00e9dure un processus demandant l'ex\u00e9cution de plusieurs requ\u00eates, le client ne communique qu'une seule fois avec le serveur (pour demander l'ex\u00e9cution de la proc\u00e9dure) pour ex\u00e9cuter la totalit\u00e9 du traitement. Cela permet donc un certain gain en performance. Elles permettent \u00e9galement de s\u00e9curiser une base de donn\u00e9es. Par exemple, il est possible de restreindre les droits des utilisateurs de fa\u00e7on \u00e0 ce qu'ils puissent uniquement ex\u00e9cuter des proc\u00e9dures. Finis les DELETE  dangereux ou les UPDATE  inconsid\u00e9r\u00e9s. Chaque requ\u00eate ex\u00e9cut\u00e9e par les utilisateurs est cr\u00e9\u00e9e et contr\u00f4l\u00e9e par l'administrateur de la base de donn\u00e9es par l'interm\u00e9diaire des proc\u00e9dures stock\u00e9es.</p> <p>Cela permet ensuite de s'assurer qu'un traitement est toujours ex\u00e9cut\u00e9 de la m\u00eame mani\u00e8re, quelle que soit l'application/le client qui le lance. Il arrive par exemple qu'une m\u00eame base de donn\u00e9es soit exploit\u00e9e par plusieurs applications, lesquelles peuvent \u00eatre \u00e9crites avec diff\u00e9rents langages. Si on laisse chaque application avoir son propre code pour un m\u00eame traitement, il est possible que des diff\u00e9rences apparaissent (distraction, mauvaise communication, erreur ou autre). Par contre, si chaque application appelle la m\u00eame proc\u00e9dure stock\u00e9e, ce risque dispara\u00eet.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#inconvenients","title":"Inconv\u00e9nients","text":"<p>Les proc\u00e9dures stock\u00e9es ajoutent \u00e9videmment \u00e0 la charge du serveur de donn\u00e9es. Plus on impl\u00e9mente de logique de traitement directement dans la base de donn\u00e9es, moins le serveur est disponible pour son but premier : le stockage de donn\u00e9es.</p> <p>Par ailleurs, certains traitements seront toujours plus simples et plus courts \u00e0 \u00e9crire (et donc \u00e0 maintenir) s'ils sont d\u00e9velopp\u00e9s dans un langage informatique adapt\u00e9. A fortiori lorsqu'il s'agit de traitements complexes. La logique qu'il est possible d'impl\u00e9menter avec MySQL permet de nombreuses choses, mais reste assez basique.</p> <p>Enfin, la syntaxe des proc\u00e9dures stock\u00e9es diff\u00e8re beaucoup d'un SGBD \u00e0 un autre. Par cons\u00e9quent, si l'on d\u00e9sire en changer, il faudra proc\u00e9der \u00e0 un grand nombre de corrections et d'ajustements.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/cours/#conclusion-et-usage","title":"Conclusion et usage","text":"<p>Comme souvent, tout est question d'\u00e9quilibre. Il faut savoir utiliser des proc\u00e9dures quand c'est utile, quand on a une bonne raison de le faire. Il ne sert \u00e0 rien d'en abuser. Pour une base contenant des donn\u00e9es ultrasensibles, une bonne gestion des droits des utilisateurs coupl\u00e9e \u00e0 l'usage de proc\u00e9dures stock\u00e9es peut se r\u00e9v\u00e9ler salutaire. </p> <p>Pour une base de donn\u00e9es destin\u00e9e \u00e0 \u00eatre utilis\u00e9e par plusieurs applications diff\u00e9rentes, on choisira de cr\u00e9er des proc\u00e9dures pour les traitements g\u00e9n\u00e9raux et/ou pour lesquels la moindre erreur peut poser de gros probl\u00e8mes. Pour un traitement long, impliquant de nombreuses requ\u00eates et une logique simple, on peut s\u00e9rieusement gagner en performance en le faisant dans une proc\u00e9dure stock\u00e9e (a fortiori si ce traitement est souvent lanc\u00e9). \u2714\ufe0f \u00c0 vous de voir quelles proc\u00e9dures sont utiles pour votre application et vos besoins.</p> <p>En r\u00e9sum\u00e9</p> <p>\u25b6\ufe0f Une proc\u00e9dure stock\u00e9e est un ensemble d'instructions que l'on peut ex\u00e9cuter sur commande. \u25b6\ufe0f Une proc\u00e9dure stock\u00e9e est un objet de la base de donn\u00e9es stock\u00e9 de mani\u00e8re durable, au m\u00eame titre qu'une table. Elle n'est pas supprim\u00e9e \u00e0 la fin de la session comme l'est une requ\u00eate pr\u00e9par\u00e9e. \u25b6\ufe0f On peut passer des param\u00e8tres \u00e0 une proc\u00e9dure stock\u00e9e, qui peuvent avoir trois sens : IN(entrant), OUT  (sortant) ou INOUT  (les deux). \u25b6\ufe0f SELECT ... INTO  permet d'assigner des donn\u00e9es s\u00e9lectionn\u00e9es \u00e0 des variables ou des param\u00e8tres, \u00e0 condition que le SELECT  ne renvoie qu'une seule ligne, et qu'il y ait autant de valeurs s\u00e9lectionn\u00e9es que de variables \u00e0 assigner. \u25b6\ufe0f Les proc\u00e9dures stock\u00e9es peuvent permettre de gagner en performance en diminuant les allers-retours entre le client et le serveur. Elles peuvent \u00e9galement aider \u00e0 s\u00e9curiser une base de donn\u00e9es et \u00e0 s'assurer que les traitements sensibles sont toujours ex\u00e9cut\u00e9s de la m\u00eame mani\u00e8re. \u25b6\ufe0f Par contre, elle ajoute \u00e0 la charge du serveur et sa syntaxe n'est pas toujours portable d'un SGBD \u00e0 un autre.</p>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/","title":"Exercices","text":""},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-1","title":"Exercice 1","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_ListeArticles</code> qui affiche la liste des articles d'une commande dont le num\u00e9ro est donn\u00e9 en param\u00e8tre </p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_ListeArticles @NumCom int as Select A.NumArt, NomArt, PUArt, QteCommandee From Article A, LigneCommande LC\nWhere LC.NumArt=A.NumArt and LC.NumCom=@NumCom\n\n--Ex\u00e9cuter cette proc\u00e9dure pour afficher la liste des articles de la commande num\u00e9ro 1 :\nExec SP_ListeArticles 1\n--Ou\nDeclare @nc int\nSet @nc=1\nExec SP_ListeArticles @nc\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-2","title":"Exercice 2","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_NbrCommandes</code> qui retourne le nombre de commandes </p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_NbrCommandes @Nbr int output as\nSet @Nbr = (Select count(NumCom) from Commande)\n\n--Ex\u00e9cuter cette proc\u00e9dures pour afficher le nombre des commandes\nDeclare @n int\nExec SP_NbrCommandes @n Output\nPrint 'Le nombre de commandes : ' + convert(varchar,@n)\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-3","title":"Exercice 3","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_NbrArtCom</code> qui retourne le nombre d'articles d'une commande dont le num\u00e9ro est donn\u00e9 en param\u00e8tre </p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER $\nCreate Procedure SP_NbrArtCom2 (IN Num int, OUT Nbr int)\nbegin\n    Select count(NumArt) INTO Nbr\n    from LigneCommande \n    where NumCom=Num ;\nend$\n--Ex\u00e9cuter cette proc\u00e9dure pour afficher le nombre d'articles de la commande num\u00e9ro 1 :\nDeclare @n int\nExec SP_NbrArtCom 1, @n Output\nPrint 'Le nombre d articles de la commande num\u00e9ro 1 est : ' + convert(varchar,@n) \n\n-- Ou\nDeclare @nc int, @n int\nSet @nc=1\nExec SP_NbrArtCom @nc, @n Output\nPrint 'Le nombre d articles de la commande num\u00e9ro ' + convert(varchar,@nc) + ' est : ' +\nconvert(varchar,@n)\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-4","title":"Exercice 4","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e <code>SP_NbrArticlesParCommande</code> qui calcule le nombre d'articles par commande</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_NbrArticlesParCommande as\nSelect Commande.NumCom, DatCom, Count(NumArt)\nFrom Commande, LigneCommande\nWhere Commande.NumCom=LigneCommande.NumCom\nGroup by Commande.NumCom, DatCom\n\n--Ex\u00e9cuter cette proc\u00e9dure :\nExec SP_NbrArticlesParCommande\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-5","title":"Exercice 5","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_ComPeriode</code> qui affiche la liste des commandes effectu\u00e9es entre deux dates donn\u00e9es en param\u00e8tre </p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_ComPeriode @DateD DateTime, @DateF DateTime as\nSelect * from Commande Where datcom between @dateD and @DateF\n\n--Ex\u00e9cuter cette proc\u00e9dure pour afficher la liste des commandes effectu\u00e9es entre le\n--10/10/2006 et le 14/12/2006 :\n\nExec SP_ComPeriode '10/10/2006', '14/12/2006'\n\n--Ou\nDeclare @dd DateTime, @df DateTime\nSet @dd='10/10/2006'\nSet @df='14/12/2006'\nExec SP_ComPeriode @dd, @df\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-6","title":"Exercice 6","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_TypeComPeriode</code> qui affiche la liste des commandes effectu\u00e9es entre deux dates pass\u00e9es en param\u00e8tres. En plus si le nombre de ces commandes est sup\u00e9rieur \u00e0 100, afficher P\u00e9riode rouge. Si le nombre de ces commandes est entre 50 et 100 afficher P\u00e9riode jaune sinon afficher P\u00e9riode blanche (exploiter la proc\u00e9dure pr\u00e9c\u00e9dente)</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_TypeComPeriode @DateD DateTime, @DateF DateTime as\nExec SP_ComPeriode @DateD, @DateF\nDeclare @nbr int\nSet @nbr=(Select count(NumCom) from Commande Where datcom between @dateD and\n@DateF)\nIf @nbr &gt;100\nPrint 'P\u00e9riode Rouge'\nElse\nBegin\nIf @nbr&lt;50\nPrint 'P\u00e9riode blanche'\nElse\nPrint 'P\u00e9riode Jaune'\nEnd\n</code></pre>"},{"location":"5_Programmation_SQL/5.1_Procedures_stockees/exercices/#exercice-7","title":"Exercice 7","text":"<p>Cr\u00e9er une proc\u00e9dure stock\u00e9e nomm\u00e9e <code>SP_EnregistrerLigneCom</code> qui re\u00e7oit un num\u00e9ro de commande, un num\u00e9ro d'article et la quantit\u00e9 command\u00e9e : - Si l'article n'existe pas ou si la quantit\u00e9 demand\u00e9e n'est pas disponible afficher un message d'erreur  - Si la commande introduite en param\u00e8tre n'existe pas, la cr\u00e9er  - Ajoute ensuite la ligne de commande et met le stock \u00e0 jour</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Procedure SP_EnregistrerLigneCom @numCom int, @numart int, @qte decimal AS\nif not exists(select numart from article where numart=@numart)\nor (select Qteenstock from article where numart=@numart) &lt; @qte\nBegin\nPrint 'Cet article n''existe pas ou stock est insuffisant'\nReturn\nEnd\nBegin transaction\nif not exists(select numcom from Commande where numCom=@numcom)\ninsert into commande values(@NumCom,getdate())\ninsert into ligneCommande values(@NumCom, @Numart,@Qte)\nupdate article set QteEnStock=QteEnStock- @Qte where NumArt=@NumArt\nCommit Transaction\n</code></pre>"},{"location":"5_Programmation_SQL/5.2_Transactions/cours/","title":"Le transactionnel","text":"<p>Les transactions sont une fonctionnalit\u00e9 absolument indispensable, permettant de s\u00e9curiser une application utilisant une base de donn\u00e9es. Sans transactions, certaines op\u00e9rations risqueraient d'\u00eatre \u00e0 moiti\u00e9 r\u00e9alis\u00e9es, et la moindre erreur, la moindre interruption pourraient avoir des cons\u00e9quences \u00e9normes. En effet, les transactions permettent de regrouper des requ\u00eates dans des blocs, et de faire en sorte que tout le bloc soit ex\u00e9cut\u00e9 en une seule fois, cela afin de pr\u00e9server l'int\u00e9grit\u00e9 des donn\u00e9es de la base.  Une transaction permet d'ex\u00e9cuter un groupe d'instructions. Si pour une raison ou une autre l'une de ces instructions n'a pas pu \u00eatre ex\u00e9cut\u00e9e, tous le groupe d'instructions est annul\u00e9 (le tout ou rien) : \u25b6\ufe0f  Pour d\u00e9marrer une transaction on utilise l'instruction <code>START TRANSACTION</code> \u25b6\ufe0f  Pour valider la transaction et rendre les traitements qui lui sont associ\u00e9s effectifs, on utilise l'instruction <code>COMMIT</code> \u25b6\ufe0f  interrompre une transaction en cours qui n'a pas encore \u00e9t\u00e9 valid\u00e9e, on utilise l'instruction <code>ROLLBACK</code> \u25b6\ufe0f  Si plusieurs transactions peuvent \u00eatre en cours, on peut leur attribuer des noms pour les distinguer</p>"},{"location":"5_Programmation_SQL/5.2_Transactions/cours/#syntaxe","title":"Syntaxe","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>START TRANSACTION\n    [transaction_characteristic [, transaction_characteristic] ...]\n\ntransaction_characteristic: {\n    WITH CONSISTENT SNAPSHOT\n  | READ WRITE\n  | READ ONLY\n}\n\nBEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n</code></pre>"},{"location":"5_Programmation_SQL/5.2_Transactions/cours/#exemple","title":"Exemple","text":"\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>START TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summary=@A WHERE type=1;\nCOMMIT;\n</code></pre>"},{"location":"5_Programmation_SQL/5.2_Transactions/cours/#application","title":"Application","text":"<p>Supposons qu'il n'existe pas de contrainte cl\u00e9 \u00e9trang\u00e8re entre le champ <code>NumCom</code> de la table <code>LigneCommande</code> et le champ <code>NumCom</code> de la <code>Commande</code>. On souhaite supprimer la commande num\u00e9ro 5 ainsi que la liste de ces articles.  Le programme serait :</p> <p>```sql Delete from Commande where NumCom=5 Delete from LigneCommande where NumCom=5 \ud83d\udccb Texte<pre><code>Mais si, juste apr\u00e8s l'ex\u00e9cution de la premi\u00e8re instruction et alors que la deuxi\u00e8me n'a pas encore eu lieu, un probl\u00e8me survient (une coupure de courant par exemple) la base de donn\u00e9es deviendra incoh\u00e9rente car on aura des lignes de commande pour une commande qui n'existe pas.&lt;br /&gt;\nEn pr\u00e9sence d'une transaction, le programme n'ayant pas atteint l'instruction Commit Tran, aurait annul\u00e9 toutes les instructions depuis Begin Tran. Le programme devra \u00eatre alors :\n\n ```sql\nSTART TRANSACTION;\nDelete from Commande where NumCom=5\nDelete from LigneCommande where NumCom=5\nCOMMIT;\n</code></pre></p>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/","title":"Les curseurs","text":""},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#definition","title":"d\u00e9finition","text":"<p>Nous avons vu qu'il \u00e9tait possible d'exploiter le r\u00e9sultat d'un <code>SELECT</code> dans un bloc d'instructions en utilisant la commande <code>SELECT colonne(s) INTO variable(s)</code>, qui assigne les valeurs s\u00e9lectionn\u00e9es \u00e0 des variables. Cependant, <code>SELECT ... INTO</code>  ne peut \u00eatre utilis\u00e9 que pour des requ\u00eates qui ne ram\u00e8nent qu'une seule ligne de r\u00e9sultats. Les curseurs permettent de parcourir un jeu de r\u00e9sultats d'une requ\u00eate <code>SELECT</code>, quel que soit le nombre de lignes r\u00e9cup\u00e9r\u00e9es, et d'en exploiter les valeurs.</p> <p>Quatre \u00e9tapes sont n\u00e9cessaires pour utiliser un curseur. - D\u00e9claration du curseur : avec une instruction <code>DECLARE</code>. - Ouverture du curseur : on ex\u00e9cute la requ\u00eate <code>SELECT</code> du curseur et on stocke le r\u00e9sultat dans celui-ci. - Parcours du curseur : on parcourt une \u00e0 une les lignes. - Fermeture du curseur.</p>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#syntaxe","title":"Syntaxe","text":""},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#declaration-du-curseur","title":"D\u00e9claration du curseur","text":"<p>Comme toutes les instructions <code>DECLARE</code>, la d\u00e9claration d'un curseur doit se faire au d\u00e9but du bloc d'instructions pour lequel celui-ci est d\u00e9fini. Plus pr\u00e9cis\u00e9ment, on d\u00e9clare les curseurs apr\u00e8s les variables locales et les conditions, mais avant les gestionnaires d'erreurs.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DECLARE nom_curseur CURSOR FOR requete_select;\nUn curseur est donc compos\u00e9 d'un nom, et d'une requ\u00eate SELECT.\nExemple :\nDECLARE curseur_client CURSOR \n    FOR SELECT * \n    FROM Client;\n</code></pre>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#ouverture-et-fermeture-du-curseur","title":"Ouverture et fermeture du curseur","text":"<p>En d\u00e9clarant le curseur, on a donc associ\u00e9 un nom et une requ\u00eate <code>SELECT</code>. L'ouverture du curseur va provoquer l'ex\u00e9cution de la requ\u00eate <code>SELECT</code>, ce qui va produire un jeu de r\u00e9sultats. Une fois que l'on aura parcouru les r\u00e9sultats, il n'y aura plus qu'\u00e0 fermer le curseur. Si l'on ne le fait pas explicitement, le curseur sera ferm\u00e9 \u00e0 la fin du bloc d'un <code>OPEN nom_curseur</code>;</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>  -- Parcours du curseur et instructions diverses\nCLOSE nom_curseur;.\n</code></pre>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#parcours-du-curseur","title":"Parcours du curseur","text":"<p>Une fois que le curseur a \u00e9t\u00e9 ouvert et le jeu de r\u00e9sultats r\u00e9cup\u00e9r\u00e9, le curseur place un pointeur sur la premi\u00e8re ligne de r\u00e9sultats. Avec la commande FETCH, on r\u00e9cup\u00e8re la ligne sur laquelle pointe le curseur, et on fait avancer le pointeur vers la ligne de r\u00e9sultats suivante. On peut comparer ce fonctionnement avec la lecture de requ\u00eate en PHP.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>FETCH nom_curseur INTO variable(s);\n</code></pre> <p>Bien entendu, comme pour <code>SELECT ... INTO</code>, il faut donner autant de variables dans la clause <code>INTO</code>  que l'on a r\u00e9cup\u00e9r\u00e9 de colonnes dans la clause <code>SELECT</code>  du curseur.</p> <p>Exemple : la proc\u00e9dure suivante parcourt les deux premi\u00e8res lignes d\u2019une table Client avec un curseur.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE parcours_deux_clients()\nBEGIN\n    DECLARE v_nom, v_prenom VARCHAR(100);\n\n    DECLARE curs_clients CURSOR\n        FOR SELECT nom, prenom  -- Le SELECT r\u00e9cup\u00e8re deux colonnes\n        FROM Client\n        ORDER BY nom, prenom;   \n        -- On trie les clients par ordre alphab\u00e9tique\n\n    OPEN curs_clients;  -- Ouverture du curseur\n\n    FETCH curs_clients INTO v_nom, v_prenom;    \n    -- On r\u00e9cup\u00e8re la premi\u00e8re ligne et on assigne les valeurs r\u00e9cup\u00e9r\u00e9es \u00e0 nos variables locales\n    SELECT CONCAT(v_prenom, ' ', v_nom) AS 'Premier client';\n\n    FETCH curs_clients INTO v_nom, v_prenom;\n    -- On r\u00e9cup\u00e8re la seconde ligne et on assigne les valeurs r\u00e9cup\u00e9r\u00e9es \u00e0 nos variables locales\n    SELECT CONCAT(v_prenom, ' ', v_nom) AS 'Second client';\n\n    CLOSE curs_clients;     -- Fermeture du curseur\nEND|\nDELIMITER ;\n\nCALL parcours_deux_clients();\n</code></pre>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#restrictions","title":"Restrictions","text":"<p><code>FETCH</code>  est la seule commande permettant de r\u00e9cup\u00e9rer une partie d'un jeu de r\u00e9sultats d'un curseur, et elle ne permet qu'une chose : r\u00e9cup\u00e9rer la ligne de r\u00e9sultats suivante. Il n'est pas possible de sauter une ou plusieurs lignes ni d'aller rechercher une ligne pr\u00e9c\u00e9dente. On ne peut que parcourir les lignes une \u00e0 une, de la premi\u00e8re \u00e0 la derni\u00e8re. Ensuite, il n'est pas possible de modifier une ligne directement \u00e0 partir d'un curseur. Il s'agit d'une restriction particuli\u00e8re \u00e0 MySQL. D'autres SGBD vous permettent des requ\u00eates d'<code>UPDATE</code> directement sur les curseurs.</p>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#parcourir-intelligemment-tous-les-resultats-dun-curseur","title":"Parcourir intelligemment tous les r\u00e9sultats d'un curseur","text":"<p>Pour r\u00e9cup\u00e9rer une ligne de r\u00e9sultats, on utilise donc <code>FETCH</code>. Dans la proc\u00e9dure <code>parcours_deux_clients()</code>, on voulait r\u00e9cup\u00e9rer les deux premi\u00e8res lignes, on a donc utilis\u00e9 deux <code>FETCH</code>. Cependant, la plupart du temps, on ne veut pas seulement utiliser les deux premi\u00e8res lignes, mais toutes ! Or, sauf exception, on ne sait pas combien de lignes seront s\u00e9lectionn\u00e9es.</p> <p>On veut donc parcourir une \u00e0 une les lignes de r\u00e9sultats et leur appliquer un traitement, sans savoir \u00e0 l'avance combien de fois ce traitement devra \u00eatre r\u00e9p\u00e9t\u00e9. Pour cela, on utilise une boucle ! <code>WHILE</code>, <code>REPEAT</code> ou <code>LOOP</code>. Il n'y a plus qu'\u00e0 trouver une condition pour arr\u00eater la boucle une fois tous les r\u00e9sultats parcourus.</p>"},{"location":"5_Programmation_SQL/5.3_curseurs/cours/#condition-darret","title":"Condition d'arr\u00eat","text":"<p>Voyons ce qui se passe lorsque l'on fait un <code>FETCH</code> alors qu'il n'y a plus, ou pas, de r\u00e9sultats. Voici une proc\u00e9dure qui s\u00e9lectionne les clients selon une ville donn\u00e9e en param\u00e8tre. Les lignes sont r\u00e9cup\u00e9r\u00e9es et affich\u00e9es gr\u00e2ce au <code>FETCH</code>, plac\u00e9 dans une boucle <code>LOOP</code>. Je rappelle que cette boucle ne d\u00e9finit pas de condition d'arr\u00eat : il est n\u00e9cessaire d'ajouter une instruction <code>LEAVE</code>  pour l'arr\u00eater. Ici, pour tester, on ne mettra pas d'instruction <code>LEAVE</code>.</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCREATE PROCEDURE test_condition(IN p_ville VARCHAR(100))\nBEGIN\n    DECLARE v_nom, v_prenom VARCHAR(100);\n\n    DECLARE curs_clients CURSOR\n        FOR SELECT nom, prenom\n        FROM Client\n        WHERE ville = p_ville;\n\n    OPEN curs_clients;                                    \n\n    LOOP                                                  \n        FETCH curs_clients INTO v_nom, v_prenom;                   \n        SELECT CONCAT(v_prenom, ' ', v_nom) AS 'Client';\n    END LOOP;\n\n    CLOSE curs_clients; \nEND|\nDELIMITER ;\n</code></pre> <p>Exemple : Pour afficher la liste des articles sous la forme : L'article Num\u00e9ro ........  portant la d\u00e9signation \u2026\u2026\u2026co\u00fbte \u2026. \u2026..&gt;</p> <p>\u25b6\ufe0f Ecrire le curseur correspondant </p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Declare @a int, @b Varchar(10), @c real\nDeclare Cur_ListeArt Cursor for Select NumArt, DesArt,puart from article\nOpen Cur_ListeArt\nFetch Next from Cur_ListeArt into @a,@b,@c\nWhile @@fetch_status=0\nBegin\nPrint 'L''article num\u00e9ro ' + convert(varchar,@a) + ' portant la d\u00e9signation ' + @b+ ' co\u00fbte    ' +     convert(varchar,@c)\nFetch Next from Cur_ListeArt into @a,@b,@c\nEnd\nClose Cur_ListeArt\nDeallocate Cur_ListeArt\n</code></pre>"},{"location":"5_Programmation_SQL/5.3_curseurs/exercices/","title":"Exercices","text":""},{"location":"5_Programmation_SQL/5.3_curseurs/exercices/#exercice-1","title":"Exercice 1","text":"<p>Ecrire un programme qui pour chaque commande Affiche le num\u00e9ro et la date de commande sous la forme :  Commande N\u00b0 : \u2026\u2026 Effectu\u00e9e le : \u2026Pour un montant de \u2026</p> Correction"},{"location":"5_Programmation_SQL/5.3_curseurs/exercices/#exercice-2","title":"Exercice 2","text":"<p>Ecrire un programme qui pour chaque commande v\u00e9rifie si cette commande a au moins un article. Si c'est le cas affiche son num\u00e9ro et la liste de ses articles sinon affiche un message d'erreur (Attention ce cours ne contient pas la gestion des erreurs) : Aucun article pour la commande \u2026. Elle sera supprim\u00e9e et supprime cette commande</p> Correction"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/","title":"Les triggers ou d\u00e9clencheurs","text":"<p>Les triggers (ou d\u00e9clencheurs) sont des objets de la base de donn\u00e9es. Attach\u00e9s \u00e0 une table, ils vont d\u00e9clencher l'ex\u00e9cution d'une instruction, ou d'un bloc d'instructions, lorsqu'une ou plusieurs lignes sont ins\u00e9r\u00e9es, supprim\u00e9es ou modifi\u00e9es dans la table \u00e0 laquelle ils sont attach\u00e9s.</p> <p>Nous allons voir comment ils fonctionnent exactement, comment on peut les cr\u00e9er et les supprimer, et surtout, comment on peut s'en servir et quelles sont leurs restrictions.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#principe-et-usage","title":"Principe et usage","text":""},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#quest-ce-quun-trigger","title":"Qu'est-ce qu'un trigger ?","text":"<p>Tout comme les proc\u00e9dures stock\u00e9es, les triggers servent \u00e0 ex\u00e9cuter une ou plusieurs instructions. Mais \u00e0 la diff\u00e9rence des proc\u00e9dures, il n'est pas possible d'appeler un trigger : un trigger doit \u00eatre d\u00e9clench\u00e9 par un \u00e9v\u00e9nement.</p> <p>Un trigger est attach\u00e9 \u00e0 une table et peut \u00eatre d\u00e9clench\u00e9 par :</p> <p>une insertion dans la table (requ\u00eate <code>INSERT</code>)      la suppression d'une partie des donn\u00e9es de la table (requ\u00eate <code>DELETE</code>)      la modification d'une partie des donn\u00e9es de la table (requ\u00eate <code>UPDATE</code>)</p> <p>Par ailleurs, une fois le trigger d\u00e9clench\u00e9, ses instructions peuvent \u00eatre ex\u00e9cut\u00e9es soit juste avant l'ex\u00e9cution de l'\u00e9v\u00e9nement d\u00e9clencheur, soit juste apr\u00e8s.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#que-fait-un-trigger","title":"Que fait un trigger ?","text":"<p>Un trigger ex\u00e9cute un traitement pour chaque ligne ins\u00e9r\u00e9e, modifi\u00e9e ou supprim\u00e9e par l'\u00e9v\u00e9nement d\u00e9clencheur. Donc si l'on ins\u00e8re cinq lignes, les instructions du trigger seront ex\u00e9cut\u00e9es cinq fois, chaque it\u00e9ration permettant de traiter les donn\u00e9es d'une des lignes ins\u00e9r\u00e9es.</p> <p>Les instructions d'un trigger suivent les m\u00eames principes que les instructions d'une proc\u00e9dure stock\u00e9e. S'il y a plus d'une instruction, il faut les mettre \u00e0 l'int\u00e9rieur d'un bloc d'instructions. Les structures que nous avons vues dans les deux chapitres pr\u00e9c\u00e9dents sont bien s\u00fbr utilisables (structures conditionnelles, boucles, gestionnaires d'erreurs, etc.), avec toutefois quelques restrictions que nous verrons en fin de chapitre.  Un trigger peut modifier et/ou ins\u00e9rer des donn\u00e9es dans n'importe quelle table sauf les tables utilis\u00e9es dans la requ\u00eate qui l'a d\u00e9clench\u00e9. En ce qui concerne la table \u00e0 laquelle le trigger est attach\u00e9 (qui est forc\u00e9ment utilis\u00e9e par l'\u00e9v\u00e9nement d\u00e9clencheur), le trigger peut lire et modifier uniquement la ligne ins\u00e9r\u00e9e, modifi\u00e9e ou supprim\u00e9e qu'il est en train de traiter.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#a-quoi-sert-un-trigger","title":"\u00c0 quoi sert un trigger ?","text":"<p>On peut faire de nombreuses choses avec un trigger. Voici quelques exemples d'usage fr\u00e9quent de ces objets. </p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#contraintes-et-verifications-de-donnees","title":"Contraintes et v\u00e9rifications de donn\u00e9es","text":"<p>MySQL n'impl\u00e9mente pas de contraintes d'assertion, qui sont des contraintes permettant de limiter les valeurs accept\u00e9es par une colonne (limiter une colonne TINYINT  \u00e0 TRUE  (1) ou FALSE  (0), par exemple). Avec des triggers se d\u00e9clenchant avant l'INSERT  et avant l'UPDATE, on peut v\u00e9rifier les valeurs d'une colonne lors de l'insertion ou de la modification, et les corriger si elles ne font pas partie des valeurs acceptables, ou bien faire \u00e9chouer la requ\u00eate. On peut ainsi pallier l'absence de contraintes d'assertion.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#integrite-des-donnees","title":"Int\u00e9grit\u00e9 des donn\u00e9es","text":"<p>Les triggers sont parfois utilis\u00e9s pour remplacer les options des cl\u00e9s \u00e9trang\u00e8res <code>ON UPDATE RESTRICT|CASCADE|SET NULL</code>  et <code>ON DELETE RESTRICT|CASCADE|SET NULL</code>, notamment pour des tables MyISAM qui sont non transactionnelles et ne supportent pas les cl\u00e9s \u00e9trang\u00e8res. Cela peut aussi \u00eatre utilis\u00e9 avec des tables transactionnelles, dans les cas o\u00f9 le traitement \u00e0 appliquer pour garder des donn\u00e9es coh\u00e9rentes est plus complexe que ce qui est permis par les options de cl\u00e9s \u00e9trang\u00e8res.</p> <p>Par exemple, dans certains syst\u00e8mes, on veut pouvoir appliquer deux syst\u00e8mes de suppression : - une vraie suppression pure et dure, avec effacement des donn\u00e9es, donc une requ\u00eate DELETE   - un archivage, qui masquera les donn\u00e9es dans l'application, mais les conservera dans la base de donn\u00e9es.</p> <p>Dans ce cas, une solution possible est d'ajouter aux tables contenant des donn\u00e9es archivables une colonne archive, pouvant contenir 0 (la ligne n'est pas archiv\u00e9e) ou 1 (la ligne est archiv\u00e9e). Pour une vraie suppression, on peut utiliser simplement un <code>ON DELETE RESTRICT|CASCADE|SET NULL</code> qui se r\u00e9percutera sur les tables r\u00e9f\u00e9ren\u00e7ant les donn\u00e9es supprim\u00e9es. Par contre, dans le cas d'un archivage, on utilisera plut\u00f4t un trigger pour traiter les lignes qui r\u00e9f\u00e9rencent les donn\u00e9es archiv\u00e9es, par exemple en les archivant \u00e9galement.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#historisation-des-actions","title":"Historisation des actions","text":"<p>On veut parfois garder une trace des actions effectu\u00e9es sur la base de donn\u00e9es, c'est-\u00e0-dire, par exemple, savoir qui a modifi\u00e9 telle ligne, et quand. Avec les triggers, rien de plus simple, il suffit de mettre \u00e0 jour des donn\u00e9es d'historisation \u00e0 chaque insertion, modification ou suppression, soit directement dans la table concern\u00e9e, soit dans une table utilis\u00e9e sp\u00e9cialement et exclusivement pour garder un historique des actions.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#mise-a-jour-dinformations-qui-dependent-dautres-donnees","title":"Mise \u00e0 jour d'informations qui d\u00e9pendent d'autres donn\u00e9es","text":"<p>Comme pour les proc\u00e9dures stock\u00e9es, une partie de la logique \"business\" de l'application peut \u00eatre cod\u00e9e directement dans la base de donn\u00e9es gr\u00e2ce aux triggers, plut\u00f4t que du c\u00f4t\u00e9 applicatif (en PHP, Java ou quel que soit le langage de programmation utilis\u00e9). \u00c0 nouveau, cela peut permettre d'harmoniser un traitement \u00e0 travers plusieurs applications utilisant la m\u00eame base de donn\u00e9es. Par ailleurs, lorsque certaines informations d\u00e9pendent de la valeur de certaines donn\u00e9es, on peut en g\u00e9n\u00e9ral les retrouver en faisant une requ\u00eate <code>SELECT</code>. Dans ce cas, il n'est pas indispensable de stocker ces informations. Cependant, utiliser les triggers pour stocker ces informations peut faciliter la vie de l'utilisateur et peut aussi faire gagner en performance, par exemple, si l'on a tr\u00e8s souvent besoin de cette information, ou si la requ\u00eate \u00e0 faire pour trouver cette information est longue \u00e0 ex\u00e9cuter. C'est typiquement cet usage qui est fait des triggers dans ce que l'on appelle les \"vues mat\u00e9rialis\u00e9es\".</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#creation-des-triggers","title":"Cr\u00e9ation des triggers","text":""},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#syntaxe","title":"Syntaxe","text":"<p>Pour cr\u00e9er un trigger, on utilise la commande suivante : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE TRIGGER nom_trigger moment_trigger evenement_trigger\nON nom_table FOR EACH ROW\ncorps_trigger;\n</code></pre> \u27a1\ufe0f <code>CREATE TRIGGER nom_trigger</code>  : les triggers ont donc un nom. \u27a1\ufe0f <code>moment_trigger`` evenement_trigger</code>  : servent \u00e0 d\u00e9finir quand et comment le trigger est d\u00e9clench\u00e9. \u27a1\ufe0f <code>ON nom_table</code>  : c'est l\u00e0 que l'on d\u00e9finit \u00e0 quelle table le trigger est attach\u00e9. \u27a1\ufe0f <code>FOR EACH ROW</code>  : signifie litt\u00e9ralement \"pour chaque ligne\", sous-entendu \"pour chaque ligne ins\u00e9r\u00e9e/supprim\u00e9e/modifi\u00e9e\" selon ce qui a d\u00e9clench\u00e9 le trigger. \u27a1\ufe0f <code>corps_trigger</code>  : c'est le contenu du trigger. Comme pour les proc\u00e9dures stock\u00e9es, il peut s'agir soit d'une seule instruction, soit d'un bloc d'instructions.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#evenement-declencheur","title":"\u00c9v\u00e9nement d\u00e9clencheur","text":"<p>Trois \u00e9v\u00e9nements diff\u00e9rents peuvent d\u00e9clencher l'ex\u00e9cution des instructions d'un trigger : \u27a1\ufe0f l'insertion de lignes (INSERT) dans la table attach\u00e9e au trigger  \u27a1\ufe0f la modification de lignes (UPDATE) de cette table  \u27a1\ufe0f la suppression de lignes (DELETE) de la table. Un trigger est d\u00e9clench\u00e9 soit par INSERT, soit par UPDATE, soit par DELETE. Il ne peut pas \u00eatre d\u00e9clench\u00e9 par deux \u00e9v\u00e9nements diff\u00e9rents. On peut par contre cr\u00e9er plusieurs triggers par table pour couvrir chaque \u00e9v\u00e9nement.</p> <p>\u25b6\ufe0f Avant ou apr\u00e8s Lorsqu'un trigger est d\u00e9clench\u00e9, ses instructions peuvent \u00eatre ex\u00e9cut\u00e9es \u00e0 deux moments diff\u00e9rents : soit juste avant que l'\u00e9v\u00e9nement d\u00e9clencheur n'ait lieu (<code>BEFORE</code>), soit juste apr\u00e8s (<code>AFTER</code>).</p> <p>Donc, si vous avez un trigger <code>BEFORE UPDATE</code> sur la table <code>A</code>, l'ex\u00e9cution d'une requ\u00eate <code>UPDATE</code> sur cette table va d'abord d\u00e9clencher l'ex\u00e9cution des instructions du trigger, ensuite seulement les lignes de la table seront modifi\u00e9es.</p> <p>Exemple : Pour cr\u00e9er un trigger sur la table <code>Article</code>, d\u00e9clench\u00e9 par une insertion et s'ex\u00e9cutant apr\u00e8s ladite insertion, on utilisera la syntaxe suivante : \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>CREATE TRIGGER after_insert_article AFTER INSERT\nON Article FOR EACH ROW\ncorps_trigger;\n</code></pre></p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#regle-et-convention","title":"R\u00e8gle et convention","text":"<p>Il ne peut exister qu'un seul trigger par combinaison <code>moment_trigger/evenement_trigger</code> par table. Donc un seul trigger <code>BEFORE UPDATE</code> par table, un seul <code>AFTER DELETE</code>, etc...</p> <p>\u00c9tant donn\u00e9 qu'il existe deux possibilit\u00e9s pour le moment d'ex\u00e9cution, et trois pour l'\u00e9v\u00e9nement d\u00e9clencheur, on a donc un maximum de six triggers par table. Cette r\u00e8gle \u00e9tant \u00e9tablie, il existe une convention quant \u00e0 la mani\u00e8re de nommer ses triggers, que je vous encourage \u00e0 suivre : <code>nom_trigger = moment_evenement_table</code>. Donc le trigger <code>BEFORE UPDATE ON Animal</code>  aura pour nom : <code>before_update_animal</code>.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#old-et-new","title":"OLD et NEW","text":"<p>Dans le corps du trigger, MySQL met \u00e0 disposition deux mots-cl\u00e9s : OLD  et NEW. \u25b6\ufe0f OLD  repr\u00e9sente les valeurs des colonnes de la ligne trait\u00e9e avant qu'elle ne soit modifi\u00e9e par l'\u00e9v\u00e9nement d\u00e9clencheur. Ces valeurs peuvent \u00eatre lues, mais pas modifi\u00e9es. \u25b6\ufe0f NEW  repr\u00e9sente les valeurs des colonnes de la ligne trait\u00e9e apr\u00e8s qu'elle a \u00e9t\u00e9 modifi\u00e9e par l'\u00e9v\u00e9nement d\u00e9clencheur. Ces valeurs peuvent \u00eatre lues et modifi\u00e9es. Il n'y a que dans le cas d'un trigger <code>UPDATE</code> que <code>OLD</code> et <code>NEW</code>  coexistent. Lors d'une insertion, <code>OLD</code> n'existe pas, puisque la ligne n'existe pas avant l'\u00e9v\u00e9nement d\u00e9clencheur. Dans le cas d'une suppression, c'est <code>NEW</code>  qui n'existe pas, puisque la ligne n'existera plus apr\u00e8s l'\u00e9v\u00e9nement d\u00e9clencheur.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#suppression-des-triggers","title":"Suppression des triggers","text":"<p>Encore une fois, la commande <code>DROP</code> permet de supprimer un trigger. \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DROP TRIGGER nom_trigger;\n</code></pre> Tout comme pour les proc\u00e9dures stock\u00e9es, il n'est pas possible de modifier un trigger. Il faut le supprimer puis le recr\u00e9er diff\u00e9remment. Par ailleurs, si l'on supprime une table, on supprime \u00e9galement tous les triggers qui y sont attach\u00e9s.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#fonctionnement-des-tables-inserted-et-deleted","title":"Fonctionnement des tables inserted et deleted","text":"<p>Au cours des op\u00e9rations d'ajout, de suppression et de modification, le syst\u00e8me utilise les tables temporaires <code>inserted</code> et <code>deleted</code>. Ces tables ne sont accessibles qu'au niveau des triggers et leur contenu est perdu d\u00e8s que les triggers sont valid\u00e9s.  Action d'ajout : Les enregistrements ajout\u00e9s sont plac\u00e9s dans une table temporaire nomm\u00e9e <code>inserted</code> \u25b6\ufe0f Action de suppression : Les enregistrements supprim\u00e9s sont plac\u00e9s dans une table temporaire nomm\u00e9e deleted. \u25b6\ufe0f Action de modification :  L'op\u00e9ration de modification est interpr\u00e9t\u00e9e comme une op\u00e9ration de suppression des anciennes informations et d'ajout des nouvelles informations. </p> <p>C'est pourquoi le syst\u00e8me utilise dans ce cas les deux tables temporaires <code>deleted</code> et <code>inserted</code>. En fait quand un utilisateur demande \u00e0 modifier des enregistrements, ceux ci sont d'abord sauvegard\u00e9s dans la table temporaire <code>deleted</code> et la copie modifi\u00e9e est enregistr\u00e9e dans la table <code>inserted</code>.</p>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/cours/#exemple-de-triggers","title":"Exemple de triggers","text":"<p>Le trigger suivant \u00e0 la suppression d'une ligne de commande, remet \u00e0 jour le stock et v\u00e9rifie s'il s'agit de la derni\u00e8re ligne pour cette commande. Si c'est le cas la commande est supprim\u00e9e :</p> \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>DELIMITER |\nCreate Trigger Tr_Supprimer_Ligne AFTER DELETE\nOn LigneCommande FOR EACH ROW\nBEGIN\n    Update article \n    set QteEnStock = QteEnStock + OLD.QteCommandee where OLD.numart=article.numart;\n    Delete from commande where numcom not in (select numcom from lignecommande);\nEND |\nDELIMITER ;\n</code></pre>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/","title":"Exercices","text":""},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/#exercice-1","title":"Exercice 1","text":"<p>Le trigger suivant interdit la modification des commandes</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Trigger Tr_Emp\u00eacher_Modif\nOn Commande\nFor Update\nAs\nRollback\n</code></pre>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/#exercice-2","title":"Exercice 2","text":"<p>Le trigger suivant interdit la modification du num\u00e9ro de commande et v\u00e9rifie si la date saisie pour la date de commande est sup\u00e9rieure ou \u00e9gale \u00e0 la date du jour</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Trigger Tr_Emp\u00eacher_Modif_Numcom\nOn Commande\nFor Update\nAs\nif update(NumCom)\n    Begin\n    Raiserror('le num\u00e9ro de commande ne peut \u00eatre modifi\u00e9',15,120)\n    Rollback\nEnd\nif update(DatCom)\n    Begin\n    if ((select count (DatCom) from inserted\n        Where datediff(day,datcom,getdate() )&gt;0)&lt;&gt; 0)\n        Begin\n        Raiserror('La date de commande ne peut pas \u00eatre inf\u00e9rieur \u00e0 la date en cours',15,120)\n        Rollback\n    End\nEnd\n</code></pre>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/#exercice-3","title":"Exercice 3","text":"<p>Le trigger suivant emp\u00eache la suppression des commandes ayant des articles associ\u00e9s Remarque : Ce trigger ne se d\u00e9clenchera pas s'il existe une contrainte cl\u00e9 \u00e9trang\u00e8re entre le champ NumCom de la table ligneCommande et le champ NumCom de la table commande.</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Trigger Tr_Emp\u00eacher_Suppr\nOn Commande\nFor Delete\nAs\nDeclare @a int\nset @a =(Select count(numart) from lignecommande, deleted where lignecommande.numcom =deleted.numcom)\nif (@a&gt;0)\nBegin\nRaiserror('Op\u00e9ration annul\u00e9e. Une ou plusieurs commandes ont des articles enregistr\u00e9s',15,120)\nRollback\nEnd\n</code></pre>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/#exercice-4","title":"Exercice 4","text":"<p>Le trigger suivant \u00e0 l'ajout d'une ligne de commande v\u00e9rifie si les quantit\u00e9s sont disponibles et met le stock \u00e0 jour</p> Correction \ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Trigger Tr_Ajouter_Ligne\nOn LigneCommande\nFor Insert\nAs\nDeclare @a int\nset @a=(select count(numart) from inserted, article\nwhere article.numart = inserted.numart\nand QteCommandee &gt;QteEnStock)\nif (@a &gt;0)\nBegin\nRaiserror('Ajout refus\u00e9. Quantit\u00e9s demand\u00e9es non disponibles en stock',15,120)\nRollback\nEnd\nElse\nUpdate article set QteEnStock = QteEnStock \u2013\n(select Sum(QteCommandee) from inserted where\narticle.NumArt=inserted.NumArt)\nFrom article, inserted where inserted.numart=article.numart\n</code></pre>"},{"location":"5_Programmation_SQL/5.4_Triggers_d%C3%A9clencheurs/exercices/#exercice-5","title":"Exercice 5","text":"<p>Le trigger suivant \u00e0 la modification d'une ligne de commande v\u00e9rifie si les quantit\u00e9s sont disponibles et met le stock \u00e0 jour</p> Correction <p>\ud83d\uddc2\ufe0f Requ\u00eate SQL<pre><code>Create Trigger Tr_Modifier_Ligne\nOn LigneCommande\nFor Update\nAs\nDeclare @a int\nset @a=(select count(numart) from inserted, deleted, article\nwhere article.numart = inserted.numart\nand article.numart = deleted.numart\nand inserted.QteCommandee &gt; QteEnStock+deleted.QteCommandee)\nif (@a &gt;0)\nBegin\nRaiserror('Modification refus\u00e9e. Quantit\u00e9s demand\u00e9es non disponibles en stock',15,120)\nRollback\nEnd\nElse\nupdate article set QteEnStock = QteEnStock\n+ (select Sum(QteCommandee) from deleted where deleted.NumArt=Article.NumArt)\n\u2013  (select Sum(QteCommandee) from inserted where\ninserted.NumArt=Article.NumArt)\nFrom article, inserted, deleted\nwhere inserted.numart = article.numart\nand article.numart = deleted.numart\n</code></pre> Remarque : Si le trigger d\u00e9clench\u00e9 effectue une op\u00e9ration sur une autre table, les triggers associ\u00e9s \u00e0 cette table sont alors d\u00e9clench\u00e9s (principe de cascade)</p>"}]}